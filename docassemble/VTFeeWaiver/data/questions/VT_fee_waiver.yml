---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:phone-number-validation.yml
  - docassemble.ALToolbox:al_income.yml
  - docassemble.VTSharedYMLFile:VTSharedYMLFile.yml
---
comment: |
  Global interview metadata
metadata:
  al_weaver_version: "1.7.0"
  generated on: "2022-08-19"
  title: >-
    Fee Waiver
  short title: >-
    Fee waiver
  description: |-
    Fee waiver for Vermont Courts. Based on Vermont Judiciary paper form 600-00228 (11/2023).
  original_form: >-
    https://www.vermontjudiciary.org/media/47
  help_page_url: >-
    https://www.vermontjudiciary.org/self-help/application-waive-filing-fees-and-service-costs
  help_page_title: >-
    Application to Waive Filing Fees and Service Costs on the Vermont Judiciary website.
  authors:
    - VTCourtForms guided interview by Legal Services Vermont / VTLawHelp.org website
    - Authored by Legal Services Vermont
  categories:
    - "FA-00-00-00-00"
    - "HO-00-00-00-00"
    - "MO-00-00-00-00"
  typical role: "plaintiff"
  generate download screen: True
---
# customized feedback form
code: |   
  feedback_form = "docassemble.VTFeedback:VTfeedback.yml"
---
code: |
  interview_metadata['main_interview_key'] =  'VT_fee_waiver'
---
code: |
  github_repo_name =  'docassemble-VTFeeWaiver'
---
#this will correct the last-updated date that gets shown on About This Form page
code: |
  res = github_modified_date(github_user, "docassemble-VTFeeWaiver")
  if res:
    package_updated_on = res.format('yyyy-MM-dd')
  else:
    package_updated_on = None  
---
code: |
  interview_short_title = "Ask to waive court filing and service fees in Vermont"
---
code: |
  al_form_type = "existing_case" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - vehicles: DAList.using(object_type=DAObject, complete_attribute="complete", ask_number=True)
  - real_estate: DAList.using(object_type=DAObject, complete_attribute="complete", ask_number=True)
  - other_assets: DAList.using(object_type=DAObject, complete_attribute="complete", ask_number=True)
  - jobs: ALItemizedJobList.using(complete_attribute="complete", ask_number=True)
---
sections:
  - intro: Is this interview right for you
  - case_info: Court case info
  - about_you: You and your household
  - income: Your income
  - expenses: Your expenses
  - assets: Your property and assets
  - reasons: Other info
  - review_VT_fee_waiver: Review your answers
  - signature: Sign your document
  - download: Download your document
---
###This adds the signature feature to the interview###
code: |
  signature_fields = ['users[0].signature']
---
#################### INTERVIEW ORDER #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_VT_fee_waiver
code: |
  nav.set_section('review_VT_fee_waiver')
  # Below sets the user_role by asking a question.
  # You can set user_role directly instead to either 'plaintiff' or 'defendant'
  nav.set_section('intro')
  important_notes_to_user
  #user_ask_role
  nav.set_section('case_info')
  case_name
  
  nav.set_section('income')
  user_receives_benefits
  if user_receives_benefits:
    user_qualifies_interstitial
    employed
    jobs.gather()
    review_jobs
  else:
    set_progress(33)
    employed
    jobs.gather()
    review_jobs
    list_income
    users1_income_monthly_total
    users1_income_annual_total
    user_sees_income_total
    set_progress(50)  
  
  trial_court_division
  docket_number
  set_progress(16)
  nav.set_section('about_you')
  users.gather()
  set_parts(subtitle=str(users))
  users[0].address.address
  users[0].daytime_phone_number
  users[0].email
  household_size
  

  
  nav.set_section('expenses')
  list_expenses
  users1_expenses_monthly_total
  users1_expenses_annual_total
  user_sees_expenses_total
  set_progress(70)
  nav.set_section('assets')
  assets
  vehicles.there_are_any
  if vehicles.there_are_any: 
    vehicles.gather()
    user_sees_vehicle_net_values
  real_estate.there_are_any
  if real_estate.there_are_any: 
    real_estate.gather()
    user_sees_real_estate_net_values
  accounts_cash
  if accounts_cash:
    users1_assets_cash_total
    user_sees_cash_assets_total
  other_assets.there_are_any
  if other_assets.there_are_any: 
    other_assets.gather()
    user_sees_other_assets_values
  set_progress(85)
  
  nav.set_section('reasons')
  other_reasons_why_cannot_afford
  set_progress(98)
  interview_order_VT_fee_waiver = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  VT_fee_waiver_intro
  interview_order_VT_fee_waiver

  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
          "num_forms": len(al_user_bundle.enabled_documents()),
      },
  )
  nav.set_section('review_VT_fee_waiver')
  trial_court.address.county
  VT_fee_waiver_preview_question
  nav.set_section('signature')
  signature_date
  basic_questions_signature_flow    
  users[0].signature
  nav.set_section('download')
  VT_fee_waiver_download
---



id: are you employed
question: |
  Are you employed?
fields:
  - Are you employed?: employed
    datatype: yesnoradio
---
sets:
  - x.employer.name.first
id: employer
generic object: ALItemizedJob
question: |
  Tell us who employs you as a ${ x.source }
fields:
  - I am self-employed: x.is_self_employed
    datatype: yesno
  - Employer's name: x.employer.name.first
    show if:
      variable: x.is_self_employed
      is: False
  - note: |
      ---

      Employer's contact information
    show if:
      variable: x.is_self_employed
      is: False
  - Street address: x.employer.address.address
    address autocomplete: True
    required: False
    show if:
      variable: x.is_self_employed
      is: False
  - Unit: x.employer.address.unit
    required: False
    show if:
      variable: x.is_self_employed
      is: False
  - City: x.employer.address.city
    show if:
      variable: x.is_self_employed
      is: False
  - State: x.employer.address.state
    show if:
      variable: x.is_self_employed
      is: False
  - Zip or postal code: x.employer.address.zip
    required: False
    show if:
      variable: x.is_self_employed
      is: False
  - Phone number: x.employer.phone_number
    required: False
    show if:
      variable: x.is_self_employed
      is: False
---
id: itemized job line items
generic object: ALItemizedJob
question: |
    Enter info from your paystub for your job as a ${ x.source }
fields:
    - label: |
        % if x.is_hourly:
        What is your hourly pay for this job?
        % else:
        What are your wages for this job?
        % endif
      field: x.to_add['full time'].value
      datatype: currency
      show if:
        code: x.is_part_time is False
    - label: |
        % if x.is_hourly:
        What is your hourly pay for this job?
        % else:
        What are your wages for this job?
        % endif
      field: x.to_add['part time'].value
      datatype: currency
      show if:
        code: x.is_part_time is True
    #- Did the job have other income like tips, commissions or bonuses in the last month?: tips_commissions
    #  datatype: yesnoradio
    #- Which of these do you have: x.which_tips_commissions
    #  datatype: checkboxes
    #  choices:
    #    - Tips: tips
    #    - Commissions: commissions
    #    - Bonuses: bonuses
    #  show if: tips_commissions
    #- How much do you get in tips, commissions or bonuses? (Q2): x.to_add['tips_commissions'].value
    #  datatype: currency
    #  show if: tips_commissions
---
id: other itemized job income value
generic object: ALItemizedJob
question: |
  Adding and subtracting -- ALIncome wants to ask more questions so I made this question block
fields:
  #- Amount: x.to_add[i].value
  #  datatype: currency
  #- How often do you get paid this amount?: x.to_add[i].times_per_year
  #  input type: radio
  #  code: |
  #    times_per_year_list
  #  datatype: integer
  - Do you have another source of income?: x.to_add.there_is_another
    datatype: yesnoradio
  - Do you have anything you should subtract from your pay?: x.to_subtract.there_are_any
    datatype: yesnoradio
---
id: job review
question: |
  Review your jobs
subquestion: |
  Here is what you've told us about your jobs. You can add more or continue
  to the next question.

  ${ jobs.table }
  

  ${ jobs.add_action() }
field: review_jobs
---
generic object: ALItemizedJobList
table: x.table
rows: x
columns:
  - Job title: |
      row_item.source
  - Employer: |
      row_item.employer.name if hasattr(row_item.employer.name, "first") else ""
  - Monthly Gross Income: |
      currency(row_item.gross_total(times_per_year=12))

edit:
  - source
  - employer.name.first
  - employer.address.city
  - to_add.revisit
  - to_subtract.revisit
confirm: True
---
generic object: ALItemizedValueDict
table: x.table
rows: x
columns:
  - Type: |
      str(row_index).replace("_", " ").lower().capitalize()
  - Amount: |
      '$0' if hasattr(row_item, 'exists') and not row_item.exists else currency(row_item.value)
  
edit:
  #- exists
  - is_part_time
  - is_hourly
  - times_per_year
  - value



---
id: basic questions intro screen
decoration: form-lineal
question: |
  ${interview_short_title}
subquestion: |  

  <p>${ intro_vtcourtforms_3_steps }</p>
  
  <i class="fas fa-file-text fa-2x"></i> This guided interview will produce a completed fee waiver form for Vermont courts -- form 600-00228. If approved by the Vermont Judiciary, you will not have to pay the court to start a court action.
  
    <i class="fas fa-clock fa-2x"></i>  It may take you between 20 and 40 minutes to complete this interview. If you want, you can create an account and save your work to return to later.

  <i class="fas fa-circle-info fa-2x"></i> It is free to use this program. This site is not a lawyer.
  
  Visit the [VTLawHelp.org website](https://vtlawhelp.org) for information about civil legal issues.

  <p>${ intro_vtcourtforms_created_by }</p>

fields:
  - To continue, please accept our [terms of use](https://vtlawhelp.org/vtcourtforms/terms-of-use).: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: al_intro_screen
---    
 
id: VT fee waiver intro
continue button field: VT_fee_waiver_intro
question: |
  Do you need the fee waiver form?
subquestion: |

  Before you begin, check to be sure you actually need to pay a court filing fee. When you ask the court for a Relief from Abuse (RFA) order, there is no court filing fee. If you are submitting an Answer to a court action, you usually don't have a court filing fee. Visit the Vermont Judiciary website to learn more about [filing fees](https://www.vermontjudiciary.org/fees) and [asking to file court papers for free in Vermont](https://www.vermontjudiciary.org/self-help/application-waive-filing-fees-and-service-costs).
  
  **What you will need**
  
  For this guided interview, you will need to know:
  
  * the public benefits that you get
  * the amount of money you have in the bank and on hand
  * your income in the past month
  * your income over the past 12 months
  * your monthly expenses, and
  * the value of your vehicles / cars, real estate / home, and any other major things you own.

  If you are filling out this form on behalf of a minor or incompetent adult, you will need that person’s information.

  You will also need to know information about the court case for which you want a fee waiver. You can find this information on other court papers you have about this case. 
---
id: important_notes_to_user
question: |
  Important
subquestion: |  
  <i class="fa fa-exclamation-circle fa-2x"></i>  This program does **not** file your fee waiver form with the court. You will need to do this yourself. We will give you instructions when you finish the form.
  
  This program **cannot** tell you if you qualify for sure. The court clerk will consider all of the information you provide.
    
    Let's get started. Tap the Next button.
continue button field: important_notes_to_user
---
id: choose a court
question: |
  What court is your case in?
fields:
  - note: |
      Choose the court division and the county court where you will file this form. 
      
      If there's an existing court case, choose the division and county that the case is in. Look at the papers from the court.
      
      Not sure what county you are in? [Check this list of cities and towns to find the county.](https://en.m.wikipedia.org/wiki/List_of_municipalities_in_Vermont#Cities)

  - "Division": trial_court_division
    input type: radio
    choices:
      - Family court: family
      - Civil court: civil
      - Probate court: probate

  - County: trial_court_index
    code: all_courts._load_courts()['address_county'].items()
---
id: Court case information
question: |
  Court case information
subquestion: |
  What is the name of the court case you are involved in?
fields:
  - "Case name, as seen on your court papers (example: Kramer vs. Kramer)": case_name
    maxlength: 80
---
id: Gather users street address
sets:
  - users[0].address.address
  - users[0].address.city
  - users[0].address.zip
  - users[0].address.unit
  - users[0].address.state
question: |
  What is your address?
  
fields:
  - code: |
      users[0].address_fields(default_state=AL_DEFAULT_STATE)
  - I have a mailing address that is different from my street address: users1_mailing_address_different
    datatype: yesno
  - Mailing address: users[0].mailing_address.address
    address autocomplete: True
    show if: users1_mailing_address_different
  - Unit: users[0].mailing_address.unit
    required: False
    show if: users1_mailing_address_different
  - City: users[0].mailing_address.city
    show if: users1_mailing_address_different
  - State: users[0].mailing_address.state
    code: |
      states_list()
    default: VT
    show if: users1_mailing_address_different
  - Zip or postal code: users[0].mailing_address.zip
    required: False
    show if: users1_mailing_address_different

---
id: About you
question: |
  About you and your household
subquestion: |
  How many people live in your household? Include yourself, any spouse, partner, children and dependants.
fields:
  - "Household size": household_size
    datatype: integer
    min: 0
---
id: your contact information
question: |
  What is your contact information?
subquestion: |
  Include **at least one** way to reach you other than by mail.

  If you do not have a phone number or email, use a trusted friend's phone number. But the friend must be someone you can rely on to give you a message.

fields:  
  - Daytime phone number: users[0].daytime_phone_number
    datatype: al_international_phone
    required: False
  - Email address: users[0].email    
    datatype: email
    required: False

validation code: |
  if (not showifdef('users[0].daytime_phone_number') and \
      (not showifdef('users[0].email')) and \
      (not showifdef('users[0].other_contact_method'))):
    validation_error(word("You need to provide at least one contact method."), field="users[0].other_contact_method")
---
id: Benefits
question: |
  Public benefits
fields:
  - "Does anyone get public benefits like 3SquaresVT, Reach Up, SSI, SSDI or General Assistance?": user_receives_benefits
    datatype: yesnoradio
  - "Type(s) of benefits / assistance": users1_benefits
    show if: user_receives_benefits
    maxlength: 34
  - "Total amount every month": users1_benefits_monthly_amount
    datatype: currency
    show if: user_receives_benefits
    min: 0
---
id: user qualifies due to benefits
continue button field: user_qualifies_interstitial
question: |
  You should qualify
subquestion: |
  If you get public benefits at this time, you should qualify for a 100% waiver of fees for your case.
  
  We can skip some of the questions in the form. 
  
  Click Next to answer a couple final questions.
---
id: Work
question: |
  Work
fields:
  - "Do you get income from working?": employed
    datatype: yesnoradio
#  - "Your employer's name or company name": users1_employer_0_name
#    maxlength: 25
#    show if: employed
#  - "Your employer's address (street, city, state)": users1_employer_0_address_one_line
#    maxlength: 44
#    show if: employed
#  - "If you have a second job: Your 2nd employer's name or company name": users1_employer_1_name
#    maxlength: 25
#    show if: employed
#    required: False
#  - "Your 2nd employer's address (street, city, state)": users1_employer_1_address_one_line
#    maxlength: 44
#    show if: employed
#    required: False
---
id: Income
continue button field: list_income
question: |
  Types of income
subquestion: |
  Select any of these kinds of income you get right now. Then enter the amount of each **per month**. 
fields:
  #- "Wages": user_income_wages
  #  datatype: yesno    
  #- "Amount of your gross wages -- before taxes are taken out": users1_income_employment_monthly_amount
  #  datatype: currency
  #  min: 0
  #  show if: user_income_wages
  #- "Self employment": user_income_self_employment
  #  datatype: yesno
  #- "Amount of your net business income -- after expenses and taxes are taken out": users1_income_self_employment_monthly_amount
  #  datatype: currency
  #  min: 0
  #  show if: user_income_self_employment
  - "Unemployment benefits": user_income_unemployment
    datatype: yesno    
  - "Amount": users1_income_unemployment_monthly_amount
    datatype: currency
    min: 0
    show if: user_income_unemployment
  - "Child support": user_income_child_support
    datatype: yesno    
  - "Amount": users1_income_child_support_monthly_amount
    datatype: currency
    min: 0
    show if: user_income_child_support
  - "Other income": user_income_other
    datatype: yesno    
  - "Amount": users1_income_other_monthly_amount
    datatype: currency
    min: 0
    show if: user_income_other
  - "**I don't have any of these**": user_other_income_none
    datatype: yesno
---
mandatory: True
code: |
  users1_income_monthly_total = sum_if_defined('users1_income_unemployment_monthly_amount',
      'users1_income_child_support_monthly_amount',
      'users1_income_other_monthly_amount')

---
###To multiply for annual income###
mandatory: True
code: |
  users1_income_annual_total = sum_if_defined('users1_income_monthly_total') * 12
---
id: Show income monthly and annual totals
mandatory: True
continue button field: user_sees_income_total
question: |
  Total of this income
subquestion: |

  You said that your wages each month are:
  
  % for item in jobs:
    - ${ item.employer }: ${ currency(item.gross_total(times_per_year=12)) }
  % endfor
  
  And your total other income each month is:
    ${ currency(users1_income_monthly_total) } 
    
  Therefore, for the year it is:
    ${ currency(users1_income_annual_total) }

    
  If this is not correct, go back and correct things.
---
id: Expenses
continue button field: list_expenses
question: |
  Expenses
subquestion: |
  Select the expenses you have right now. Then enter the amount of each of those expenses **per month**.
fields:
  - "Rent or mortgage": user_expense_rent_mortgage
    datatype: yesno    
  - "Amount": users1_expenses_rent_mortgage_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_rent_mortgage
  - "Electric": user_expense_electric
    datatype: yesno     
  - "Amount": users1_expenses_electric_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_electric
  - "Phone": user_expense_phone
    datatype: yesno    
  - "Amount": users1_expenses_phone_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_phone
  - "Fuel to heat your home, water or to cook": user_expense_fuel
    datatype: yesno    
  - "Amount": users1_expenses_fuel_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_fuel
  - "Food": user_expense_food
    datatype: yesno    
  - "Amount": users1_expenses_food_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_food
  - "Clothes": user_expense_clothes
    datatype: yesno    
  - "Amount": users1_expenses_clothes_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_clothes
  - "Medical / medicine": user_expense_medicine
    datatype: yesno
  - "Amount": users1_expenses_medical_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_medicine
  - "Child support": user_expense_child_support
    datatype: yesno    
  - "Amount": users1_expenses_child_support_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_child_support
  - "Auto loan": user_expense_child_auto_loan
    datatype: yesno    
  - "Amount": users1_expenses_auto_loan_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_child_auto_loan
  - "Property taxes": user_expense_property_tax
    datatype: yesno  
  - "Amount": users1_expenses_property_tax_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_property_tax
  - "All kinds of insurance": user_expense_insurance
    datatype: yesno    
  - "Amount":  users1_expenses_all_insurance_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_insurance
  - "Other": user_expense_other
    datatype: yesno    
  - "Amount": users1_expenses_other_monthly_amount
    datatype: currency
    min: 0
    show if: user_expense_other
  - "**I don't have any expenses**": user_expense_none
    datatype: yesno
---
mandatory: True
code: | 
  users1_expenses_monthly_total = sum_if_defined('users1_expenses_rent_mortgage_monthly_amount', 
      'users1_expenses_electric_monthly_amount',
      'users1_expenses_phone_monthly_amount',
      'users1_expenses_fuel_monthly_amount',
      'users1_expenses_food_monthly_amount',
      'users1_expenses_clothes_monthly_amount',
      'users1_expenses_medical_monthly_amount',
      'users1_expenses_child_support_monthly_amount',
      'users1_expenses_auto_loan_monthly_amount',
      'users1_expenses_property_tax_monthly_amount',
      'users1_expenses_all_insurance_monthly_amount',    
      'users1_expenses_other_monthly_amount')
---
###To multiply for annual expenses###
mandatory: True
code: |
  users1_expenses_annual_total = sum_if_defined('users1_expenses_monthly_total') * 12
---
id: Expenses monthly and annual totals
mandatory: True
continue button field: user_sees_expenses_total
question: |
  Total expenses
subquestion: |
  You said that your total expenses each month are:
    ${ currency(users1_expenses_monthly_total) }
    
  Therefore, your total expenses each year are:
    ${ currency(users1_expenses_annual_total) }
    
  If this is not correct, go back one screen.
  
---
#How check the box on form if they answer any of the asset questions???
id: Assets
mandatory: True
continue button field: assets
question: |
  Assets
subquestion: |
  Now we will review the things that you own — your assets or property.
  Click the Next button.
---    
################ Gathering vehicle info ################
---
code: |
  vehicles[i].description
  vehicles[i].amount_owed
  vehicles[i].complete=True
---
###To determine the net value for vehicle###
code: |
  total = vehicles[i].market_value
  total -= vehicles[i].amount_owed
  vehicles[i].net_value = total
---
id: Vehicles
question: |
  Vehicles
fields:
  - "Do you have a car, truck or other vehicle?": vehicles.there_are_any
    input type: radio
    choices:
      - Yes: True
      - No: False
      
validation code: |
  if not vehicles.there_are_any:
    vehicles.target_number = 0
---
id: How many vehicles
question: |
  How many vehicles
fields:      
  - How many cars, trucks or other vehicles do you have?: vehicles.target_number
    datatype: integer
  - note: |
      We will ask for the value of each.
    
---
id: Describe vehicle
question: |
  Describe the ${ ordinal(i) } vehicle
subquestion: |

  % if i > 0:
  You have told us about these vehicles already:
  
  % for item in vehicles.complete_elements():
  * ${ item.description }
  
  Now tell us about the next vehicle.
  % endfor
  % endif
fields:     
  - Make, model and year of the car / truck / vehicle: vehicles[i].description
    maxlength: 76
  - What is it's market value? How much would you get if you sold it?: vehicles[i].market_value
    maxlength: 76
    datatype: currency
  - If you have a loan or owe money on the vehicle, how much do you owe? Enter 0 if you own it outright.: vehicles[i].amount_owed
    maxlength: 76
    datatype: currency
---
id: Display vehicle net values
continue button field: user_sees_vehicle_net_values
question: |
  Net value of your vehicles
subquestion: |
  With the numbers you entered, these are the **net** values of your vehicles. The net value is what you get when you subtract the amount you owe from the full market value of your vehicle.
  
  If any of these are not correct, go back a screen or two and change your numbers.

  % for item in vehicles:
    **${ item.description }** 
    
    * Net value = ${ currency(item.net_value) }
    
  % endfor
  
################ Gather real estate info ################
---
code: |
  real_estate[i].description
  real_estate[i].amount_owed
  real_estate[i].complete=True
---
###To determine the net value for real estate###
code: |
  total = real_estate[i].market_value
  total -= real_estate[i].amount_owed
  real_estate[i].net_value = total
---
id: Real estate
question: |
  Real estate
fields:
  - "Do you have any real estate like a house, building or land?": real_estate.there_are_any
    input type: radio
    choices:
      - Yes: True
      - No: False
      
validation code: |
  if not real_estate.there_are_any:
    real_estate.target_number = 0
---
id: How many real estate
question: |
  How many pieces of real estate
fields:      
  - How many houses, buildings or land parcels do you own?: real_estate.target_number
    datatype: integer
  - note: |
      We will ask for the value of each.
    
---
id: Describe real estate
question: |
  Describe the ${ ordinal(i) } piece of real esate
subquestion: |

  % if i > 0:
  You have told us about these already:
  
  % for item in real_estate.complete_elements():
  * ${ item.description }
  
  Now tell us about the next piece of real estate.
  % endfor
  % endif
fields:     
  - Short description of real estate. Examples -- house I live in, condo I live in, mobile home I live in, vacation camp, home I rent out, building for my business, land I own: real_estate[i].description
    maxlength: 76
  - What is it's market value? How much would you get if you sold it?: real_estate[i].market_value
    maxlength: 76
    datatype: currency
  - If you have a mortgage or owe money on the real estate, how much do you owe? Enter 0 if you own it outright.: real_estate[i].amount_owed
    maxlength: 76
    datatype: currency
---
id: Display real estate net values
continue button field: user_sees_real_estate_net_values
question: |
  Net value of your real estate
subquestion: |
  With the numbers you entered, these are the **net** values of your real estate. The net value is what you get when you subtract the amount you owe from the full market value of your real estate.
  
  If any of these are not correct, go back a screen or two and change your numbers.

  % for item in real_estate:
    **${ item.description }** 
    
    * Net value = ${ currency(item.net_value) }
    
  % endfor
################ Gathering other assets info ################
---
code: |
  other_assets[i].description
  other_assets[i].market_value
  other_assets[i].complete=True
---
###To determine the net value### Not needed on form
#code: |
#  total = other_assets[i].market_value
#  total -= other_assets[i].amount_owed
#  other_assets[i].net_value = total
---
id: Other assets
question: |
  Other assets -- things that you own
subquestion: |  
  These may be things like tools, equipment, recreational vehicles, electronics, stocks, bonds, etc.)? — what about retirement account?
fields:
  - "Do you have other assets that you haven't entered already?  -- what about retirement account?": other_assets.there_are_any
    input type: radio
    choices:
      - Yes: True
      - No: False
      
validation code: |
  if not other_assets.there_are_any:
    other_assets.target_number = 0
---
id: How many other assets
question: |
  How many other assets
fields:      
  - How many other assets do you have?: other_assets.target_number
    datatype: integer
  - note: |
      We will ask for the value of each.
    
---
id: Describe other asset
question: |
  Describe the ${ ordinal(i) } other asset
subquestion: |

  % if i > 0:
  You have told us about these other assets already:
  
  % for item in other_assets.complete_elements():
  * ${ item.description }
  
  Now tell us about the next asset.
  % endfor
  % endif
fields:     
  - What is the asset?: other_assets[i].description
    maxlength: 76
  - What is it's market value? How much would you get if you sold it?: other_assets[i].market_value
    maxlength: 76
    datatype: currency
---
id: Display other asset values
continue button field: user_sees_other_assets_values
question: |
  Values of your other assets
subquestion: |
  You said these are the values of your other assets.
  
  If any of these are not correct, go back a screen or two and change your numbers.

  % for item in other_assets:
    **${ item.description }** 
    
    * Market value = ${ currency(item.market_value) }

    
  % endfor
---




###############
    
---
id: Bank accounts and cash
question: |
  Bank accounts and cash
fields:
  - "Do you have bank accounts or cash on hand?": accounts_cash
    datatype: yesnoradio
  - note: |
      Enter the amounts of the accounts or cash that you have.
    show if: accounts_cash      
  - "Checking accounts": users1_assets_checking_accounts
    datatype: currency
    min: 0
    show if: accounts_cash
    required: False
  - "Cash on hand": users1_assets_cash_on_hand
    datatype: currency
    min: 0
    show if: accounts_cash
    required: False
  - "Savings accounts": users1_assets_savings_accounts
    datatype: currency
    min: 0
    show if: accounts_cash
    required: False
---
mandatory: True
code: | 
  users1_assets_cash_total = sum_if_defined('users1_assets_checking_accounts', 
      'users1_assets_cash_on_hand',
      'users1_assets_savings_accounts')
---
id: Display total cash assets
mandatory: True
show if: accounts_cash
continue button field: user_sees_cash_assets_total
question: |
  Total cash assets
subquestion: |
  You said that your total bank accounts and cash assets are:
    ${ currency(users1_assets_cash_total) }
       
  If this is not correct, go back one screen.
---
id: More information
question: |
  More information
subquestion: |
  Tell us about other reasons why you cannot afford the court fees. (optional)
fields:
  - "Reason(s)": other_reasons_why_cannot_afford
    input type: area
    maxlength: 550
    required: False
  - note: |
      ${ after_last_question_we_will_generate_your_forms }
---
id: User signature
question: |
  User signature
continue button field: User_signature
---
id: preview VT_fee_waiver
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page. 
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit your answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_VT_fee_waiver'), label='Edit your answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: VT_fee_waiver_preview_question    
---
code: |
  signature_fields = ['users[0].signature']
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  addresses_to_search = [user.address for user in users]
---
id: VT fee waiver review screen
event: review_VT_fee_waiver
question: |
  Review your answers
subquestion: |  
  ${ review_screen_instructions }
review:
  - Edit: 
    - trial_court_division
    - recompute:
      - trial_court
    button: |
      Your court case is in: **${( trial_court.address.county )} County**
      
      In this court division:
      % if defined("trial_court.division_abbr"):
      **${ trial_court.division_abbr }**
      % elif trial_court_division == "family":
      **Family**
      % elif trial_court_division == "probate":
      **Probate**
      % elif trial_court_division == "civil":
      **Civil**
      % endif
  - Edit: docket_number
    button: |
      **Docket number**:
      ${ docket_number }      
  - Edit: case_name
    button: |
      **Case name**:
      ${ case_name }
      
  - note: |
      **About you**
  - Edit: users.revisit
    button: |
      **Your name**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: household_size
    button: |
      **Number of people in your household**:
      ${ household_size }
      
      
  - note: |
      **Income**
  - Edit: user_receives_benefits
    button: |
      **You get public benefits**:
      ${ word(yesno(user_receives_benefits)) }
  - Edit: users1_benefits
    button: |
      **Type of benefits / assistance**:
      ${ users1_benefits }
  - Edit: users1_benefits_monthly_amount
    button: |
      **The amount you get every month**:
      ${ currency(users1_benefits_monthly_amount) }
  - Edit: employed
    button: |
      **Employed**:
      ${ word(yesno(employed)) }
  - Edit: jobs.revisit
    button: |
      **Jobs**

      % for job in jobs:
      * ${ job.source } at ${ job.employer.name }
      % endfor      
  - Edit: user_income_unemployment
    button: |
      **Unemployment benefits**:
      % if user_income_unemployment:
        ${ currency(users1_income_unemployment_monthly_amount) }
      % else:
        No
      % endif      
  - Edit: user_income_child_support
    button: |
      **Child support**:
      % if user_income_child_support:
        ${ currency(users1_income_child_support_monthly_amount) }
      % else:
        No
      % endif     
  - Edit: user_income_other
    button: |
      **Other income**:
      % if user_income_other:
        ${ currency(users1_income_other_monthly_amount) }
      % else:
        No
      % endif     
  - Edit: users1_income_self_employment_monthly_amount
    button: |
      **Self employment**:
      % if defined("users1_income_self_employment_monthly_amount)"):
        ${ currency(users1_income_self_employment_monthly_amount) }      
      % else:
        No
      % endif     
      
      
  - note: |
      **Expenses**      
  - Edit: users1_expenses_rent_mortgage_monthly_amount
    button: |
      **Rent or mortgage**:
      ${ currency(users1_expenses_rent_mortgage_monthly_amount) }
  - Edit: users1_expenses_electric_monthly_amount
    button: |
      **Electric**:
      ${ currency(users1_expenses_electric_monthly_amount) }
  - Edit: users1_income_employment_monthly_amount
    button: |
      **Wages**:
      ${ currency(users1_income_employment_monthly_amount) }
  - Edit: users1_expenses_phone_monthly_amount
    button: |
      **Phone**:
      ${ currency(users1_expenses_phone_monthly_amount) }
  - Edit: users1_expenses_fuel_monthly_amount
    button: |
      **Fuel**:
      ${ currency(users1_expenses_fuel_monthly_amount) }
  - Edit: users1_expenses_food_monthly_amount
    button: |
      **Food**:
      ${ currency(users1_expenses_food_monthly_amount) }
  - Edit: users1_expenses_clothes_monthly_amount
    button: |
      **Clothes**:
      ${ currency(users1_expenses_clothes_monthly_amount) }
  - Edit: users1_expenses_medical_monthly_amount
    button: |
      **Medical / medicine**:
      ${ currency(users1_expenses_medical_monthly_amount) }
  - Edit: users1_expenses_child_support_monthly_amount
    button: |
      **Child support**:
      ${ currency(users1_expenses_child_support_monthly_amount) }
#  - Edit: users1_income_monthly_total
#    button: |
#      **Total income each month**:
#      ${ currency(users1_income_monthly_total) }
  - Edit: users1_expenses_auto_loan_monthly_amount
    button: |
      **Auto loan**:
      ${ currency(users1_expenses_auto_loan_monthly_amount) }
  - Edit: users1_expenses_property_tax_monthly_amount
    button: |
      **Property taxes**:
      ${ currency(users1_expenses_property_tax_monthly_amount) }
  - Edit: users1_expenses_all_insurance_monthly_amount
    button: |
      **All kinds of insurance**:
      ${ currency(users1_expenses_all_insurance_monthly_amount) }
  - Edit: users1_expenses_other_monthly_amount
    button: |
      **Other expenses**:
      ${ currency(users1_expenses_other_monthly_amount) }

      
  - note: |
      **Assets**    
  - Edit: vehicles.revisit
    button: |
      **Vehicles**

      % for item in vehicles:
        **${ item.description }** 
        
        * Market value = ${ currency(item.market_value) }
        * Amount owed = ${ currency(item.amount_owed) }
        * Net value = ${ currency(item.net_value) }
    
      % endfor
  - Edit: real_estate.revisit
    button: |
      **Real estate**

      % for item in real_estate:
        **${ item.description }** 
        
        * Net value = ${ currency(item.net_value) }
        
        % endfor
  - Edit: users1_assets_checking_accounts
    button: |
      **Checking accounts**:
      ${ currency(users1_assets_checking_accounts) }
  - Edit: users1_assets_cash_on_hand
    button: |
      **Cash on hand**:
      ${ currency(users1_assets_cash_on_hand) }
  - Edit: users1_assets_savings_accounts
    button: |
      **Savings accounts**:
      ${ currency(users1_assets_savings_accounts) }
  - Edit: users1_assets_cash_total
    button: |
      **Total cash assets**:
      ${ currency(users1_assets_cash_total) }
  - Edit: users1_assets_other_0_market_value
    button: |
      **Other asset - market value**:
      ${ currency(users1_assets_other_0_market_value) }
  - Edit: users1_assets_other_0_description
    button: |
      **Other asset - description**:
      ${ users1_assets_other_0_description }
  - Edit: users1_assets_other_1_description
    button: |
      **2nd Other asset - description**:
      ${ users1_assets_other_1_description }
      
  - Edit: other_reasons_why_cannot_afford
    button: |
      **Other reason(s) you cannot afford the fees (optional question)**:
      % if defined("other_reasons_why_cannot_afford"):
      ${ single_paragraph(other_reasons_why_cannot_afford) }
      % else:
      None
      % endif
  - Edit: signature_date
    button: |
      **Date of signature for these forms**:
      ${ signature_date }

---
continue button field: users.revisit
question: |
  Edit info about you
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - Mailing address: |
      row_item.mailing_address.block() if defined("row_item.mailing_address.address") else ""
  - Email: |
      row_item.email if defined("row_item.email") else ""
  - Phone number: |
      row_item.daytime_phone_number if defined("row_item.daytime_phone_number") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
edit:
  - name.first
  - address.address
  - mailing_address.address
  - email
  - daytime_phone_number
  - signature
confirm: True
---
continue button field: vehicles.revisit
question: |
  Edit vehicles
subquestion: |
  ${ vehicles.table }

  ${ vehicles.add_action() }
---
table: vehicles.table
rows: vehicles
columns:
  - Description: |
      row_item.description if defined("row_item.description") else ""
  - Market value: |
      currency(row_item.market_value) if defined("row_item.market_value") else ""
  - Amount owed: |
      currency(row_item.amount_owed) if defined("row_item.amount_owed") else ""
  - Net value: |
      currency(row_item.net_value) if defined("row_item.net_value") else ""
edit:
  - description
  - market_value
  - amount_owed
---
id: download VT_fee_waiver
event: VT_fee_waiver_download
question: |
  Review your forms and download and/or print them
subquestion: |
  ${ download_screen_instructions }

  ${ action_button_html(url_action('review_divorce'), label='Edit your answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  
  ${ download_screen_bottom_instructions }
  
  ${ collapse_template(not_seeing_email) }
  ${ collapse_template(log_out_when_done) }

progress: 100
---
objects:
  - VT_fee_waiver_post_interview_instructions: ALDocument.using(title="Instructions", filename="VT_fee_waiver_next_steps.docx", enabled=True, has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - VT_fee_waiver_attachment: ALDocument.using(title="Fee Waiver — Vermont court form 600-00228", filename="VT_fee_waiver.pdf", enabled=True, has_addendum=True, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[VT_fee_waiver_post_interview_instructions,VT_fee_waiver_attachment], filename="VT_fee_waiver.pdf_package.pdf", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[VT_fee_waiver_attachment], filename="VT_fee_waiver.pdf_package.pdf", title="All forms to download for your records", enabled=True)
---
attachments:
  - name: VT fee waiver post interview instructions
    filename: Post-interview-instructions     
    variable name: VT_fee_waiver_post_interview_instructions[i]        
    skip undefined: True
    docx template file: VT_fee_waiver_next_steps.docx
  - name: VT fee waiver attachment
    filename: VT_fee_waiver.pdf     
    variable name: VT_fee_waiver_attachment[i]        
    skip undefined: True
    pdf template file: VT_fee_waiver.pdf
    fields:
      - "court_division": |
          % if defined("trial_court.division_abbr"):
            ${ trial_court.division_abbr.upper()  }
          % elif trial_court_division == "family":
          FAMILY          
          % elif trial_court_division == "probate":
          PROBATE          
          % elif trial_court_division == "civil":
          CIVIL          
          % endif
      - "docket_number": ${ docket_number }
      - "trial_court_county": ${(trial_court.address.county)}
      - "case_name": ${ case_name }
      - "users1_name_full": ${ users[0] }
      - "users1_name_full__1": ${ users[0] }
      - "users1_address_line_one": ${ users[0].address.line_one() }
      - "users1_address_line_two": ${ users[0].address.line_two() }
      - "users1_mailing_address_on_one_line": |
          % if users1_mailing_address_different:
          ${ users[0].mailing_address.on_one_line() }
          % endif
      - "users1_email": ${ users[0].email }
      - "users1_phone_number": ${ users[0].daytime_phone_number }
      - "household_size": ${ household_size }
      - "employed_yes": ${ employed }
      - "employed_no": ${ not employed }
      
      - "users1_employer_0_name": ${ jobs[0].employer }
      - "users1_employer_0_address_one_line": ${ jobs[0].employer.address.on_one_line() }

      - "users1_employer_1_name": ${ jobs[1].employer }
      - "users1_employer_1_address_one_line": ${ jobs[1].employer.address.on_one_line() }
      
      - "users1_receives_benefits_yes": ${ user_receives_benefits }
      - "users1_receives_benefits_no": ${ not user_receives_benefits }
      - "users1_benefits": ${ users1_benefits }
      - "users1_benefits_monthly_amount": ${ currency(users1_benefits_monthly_amount) }
      - "users1_expenses_rent_mortgage_monthly_amount": ${ currency(users1_expenses_rent_mortgage_monthly_amount) }
      - "users1_expenses_electric_monthly_amount": ${ currency(users1_expenses_electric_monthly_amount) }
      
      - "users1_income_employment_monthly_amount": ${ currency(jobs[0].gross_total(times_per_year=12)) }
      
      - "users1_expenses_phone_monthly_amount": ${ currency(users1_expenses_phone_monthly_amount) }
      - "users1_income_unemployment_monthly_amount": ${ currency(users1_income_unemployment_monthly_amount) }
      - "users1_expenses_fuel_monthly_amount": ${ currency(users1_expenses_fuel_monthly_amount) }
      - "users1_income_child_support_monthly_amount": ${ currency(users1_income_child_support_monthly_amount) }
      - "users1_expenses_food_monthly_amount": ${ currency(users1_expenses_food_monthly_amount) }
      - "users1_income_other_monthly_amount": ${ currency(users1_income_other_monthly_amount) }
      - "users1_expenses_clothes_monthly_amount": ${ currency(users1_expenses_clothes_monthly_amount) }
      - "users1_expenses_medical_monthly_amount": ${ currency(users1_expenses_medical_monthly_amount) }
      - "users1_income_self_employment_monthly_amount": ${ currency(users1_income_self_employment_monthly_amount) }
      - "users1_expenses_child_support_monthly_amount": ${ currency(users1_expenses_child_support_monthly_amount) }
      
      - "users1_income_monthly_total": ${ currency(users1_income_monthly_total) }
      - "users1_expenses_auto_loan_monthly_amount": ${ currency(users1_expenses_auto_loan_monthly_amount) }
      - "users1_income_annual_total": ${ currency(users1_income_annual_total) }
      - "users1_expenses_property_tax_monthly_amount": ${ currency(users1_expenses_property_tax_monthly_amount) }
      - "users1_expenses_all_insurance_monthly_amount": ${ currency(users1_expenses_all_insurance_monthly_amount) }
      - "users1_expenses_other_monthly_amount": ${ currency(users1_expenses_other_monthly_amount) }
      - "users1_expenses_monthly_total": ${ currency(users1_expenses_monthly_total) }
      - "assets_yes": |
          % if vehicles.target_number > 0:
          ${ "True" }

          % elif real_estate.target_number > 0:
          ${ "True" }

          % elif other_assets.target_number > 0:
          ${ "True" }
          % endif
      - "assets_no": |
          % if vehicles.target_number == 0:
            % if real_estate.target_number == 0:
              % if other_assets.target_number == 0:
                ${ "True" }
              % endif
            % endif
          % endif
      - "users1_assets_vehicle_0_amount_owed": ${ currency(vehicles[0].amount_owed) }
      - "users1_assets_vehicle_0_description": ${ vehicles[0].description }
      - "users1_assets_vehicle_0_net_value": ${ currency(vehicles[0].net_value) }
      - "users1_assets_vehicle_0_market_value": ${ currency(vehicles[0].market_value) }
      - "users1_assets_vehicle_1_description": ${ vehicles[1].description }
      - "users1_assets_vehicle_1_market_value": ${ currency(vehicles[1].market_value) }
      - "users1_assets_vehicle_1_amount_owed": ${ currency(vehicles[1].amount_owed) }
      - "users1_assets_vehicle_1_net_value": ${ currency(users1_assets_vehicle_1_net_value) }
      - "users1_assets_vehicle_2_description": ${ users1_assets_vehicle_2_description }
      - "users1_assets_vehicle_2_amount_owed": ${ currency(users1_assets_vehicle_2_amount_owed) }
      - "users1_assets_vehicle_2_net_value": ${ currency(users1_assets_vehicle_2_net_value) }
      - "users1_assets_vehicle_2_market_value": ${ currency(users1_assets_vehicle_2_market_value) }
      - "users1_assets_vehicle_3_description": ${ users1_assets_vehicle_3_description }
      - "users1_assets_vehicle_3_market_value": ${ currency(users1_assets_vehicle_3_market_value) }
      - "users1_assets_vehicle_3_amount_owed": ${ currency(users1_assets_vehicle_3_amount_owed) }
      - "users1_assets_vehicle_3_net_value": ${ currency(users1_assets_vehicle_3_net_value) }
      - "users1_assets_real_estate_0_description": ${ real_estate[0].description }
      - "users1_assets_real_estate_0_amount_owed": ${ currency(real_estate[0].amount_owed) }
      - "users1_assets_real_estate_0_net_value": ${ currency(real_estate[0].net_value) }
      - "users1_assets_real_estate_0_market_value": ${ currency(real_estate[0].market_value) }
      - "users1_assets_real_estate_1_description": ${ real_estate[1].description }
      - "users1_assets_real_estate_1_market_value": ${ currency(users1_assets_real_estate_1_market_value) }
      - "users1_assets_real_estate_1_amount_owed": ${ currency(users1_assets_real_estate_1_amount_owed) }
      - "users1_assets_real_estate_1_net_value": ${ currency(users1_assets_real_estate_1_net_value) }
      - "users1_assets_checking_accounts": ${ currency(users1_assets_checking_accounts) }
      - "users1_assets_cash_on_hand": ${ currency(users1_assets_cash_on_hand) }
      - "users1_assets_savings_accounts": ${ currency(users1_assets_savings_accounts) }
      - "users1_assets_cash_total": ${ currency(users1_assets_cash_total) }
      - "users1_assets_other_0_market_value": ${ currency(other_assets[0].market_value) }
      - "users1_assets_other_0_description": ${ other_assets[0].description }
      - "users1_assets_other_1_market_value": ${ currency(other_assets[1].market_value) }
      - "users1_assets_other_1_description": ${ other_assets[1].description }
      - "other_reasons_why_cannot_afford": ${VT_fee_waiver_attachment.safe_value("other_reasons_why_cannot_afford")}
      - "signature_date": ${ signature_date }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      
---
code: |
  VT_fee_waiver_attachment.overflow_fields["other_reasons_why_cannot_afford"].overflow_trigger = 534
  VT_fee_waiver_attachment.overflow_fields["other_reasons_why_cannot_afford"].label = "Why you cannot afford"
  VT_fee_waiver_attachment.overflow_fields.gathered = True

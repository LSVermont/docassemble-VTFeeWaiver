---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:phone-number-validation.yml
  - docassemble.ALToolbox:al_income.yml
  - docassemble.VTSharedYMLFile:VTSharedYMLFile.yml
---
objects:
  - all_courts: ALCourtLoader.using(file_name='courts_list_full.xlsx')
---
modules:
  - .al_income_move
---
code: |
  trial_court_index = all_courts.matching_courts_in_county(county_name=user_selected_county,search_columns=['division_abbr'],search_string=trial_court_division)[0][0]
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - jobs: ALItemizedJobList.using(complete_attribute="complete", ask_number=True)
---
objects:
  - jobs[i].to_add: ALItemizedValueDict.using(complete_attribute="complete", there_are_any=True)
---
comment: |
  Global interview metadata
metadata:
  al_weaver_version: "1.7.0"
  generated on: "2022-08-19"
  title: >-
    Fee Waiver
  short title: >-
    Fee waiver
  description: |-
    Fee waiver for Vermont Courts. Based on Vermont Judiciary paper form 600-00228 (11/2023).
  original_form: >-
    https://www.vermontjudiciary.org/media/47
  help_page_url: >-
    https://www.vermontjudiciary.org/self-help/application-waive-filing-fees-and-service-costs
  help_page_title: >-
    Application to Waive Filing Fees and Service Costs on the Vermont Judiciary website.
  authors:
    - VTCourtForms guided interview by Legal Services Vermont / VTLawHelp.org website
    - Authored by Legal Services Vermont
  categories:
    - "FA-00-00-00-00"
    - "HO-00-00-00-00"
    - "MO-00-00-00-00"
  typical role: "plaintiff"
  generate download screen: True
---
# customized feedback form
code: |   
  feedback_form = "docassemble.VTFeedback:VTfeedback.yml"
---
code: |
  interview_metadata['main_interview_key'] =  'VT_fee_waiver'
---
code: |
  github_repo_name =  'docassemble-VTFeeWaiver'
---
#this will correct the last-updated date that gets shown on About This Form page
code: |
  res = github_modified_date(github_user, "docassemble-VTFeeWaiver")
  if res:
    package_updated_on = res.format('yyyy-MM-dd')
  else:
    package_updated_on = None  
---
code: |
  interview_short_title = "Ask to waive court filing and service fees in Vermont"
---
code: |
  al_form_type = "existing_case" 
---
sections:
  - intro: Is this interview right for you
  - about_you: You and your household
  - case_info: Your court case
  - your_income: Your income
  - your_expenses: Your expenses
  - your_assets: Your property and assets
  - reasons: Other info
  - review_VT_fee_waiver: Review your answers
  - sign: Sign your document
  - get_docs: Download your document
---
###This adds the signature feature to the interview###
code: |
  signature_fields = ['users[0].signature']
---
#################### INTERVIEW ORDER #####################
---
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_VT_fee_waiver
code: |
  
  # Below sets the user_role by asking a question.
  # You can set user_role directly instead to either 'plaintiff' or 'defendant'
  nav.set_section('intro')

  #VT_fee_waiver_intro
  #set_progress(10)
  #important_notes_to_user
  #user_ask_role
  #
  #set_progress(10)
  #nav.set_section('about_you')
  #users.gather()
  #users[0].address.address
  #users[0].daytime_phone_number
  #users[0].email
  #household_size
  #
  nav.set_section('case_info')
  case_name
  docket_number
  
  #This is where we collect the desired court division and county. With those two pieces of info and our comprehensive courts_list_full spreadsheet, the exact court is determined.
  trial_court_division
  user_selected_county
  #trial_court_index = all_courts.matching_courts_in_county(county_name=user_selected_county,search_columns=['division_abbr'],search_string=trial_court_division)[0][0]
  trial_court.address.county
  
  nav.set_section('your_income')
  public_benefits.gather()
  if public_benefits.there_are_any:
    user_qualifies_interstitial   
    if employed:
      jobs.gather()
      review_jobs    
  else:
    if employed:
      jobs.gather()
      review_jobs
    set_progress(40)
    
    other_incomes.gather()

    set_progress(50)
    nav.set_section('your_expenses')
    expenses_intro
    expenses.gather()

    set_progress(60)
    nav.set_section('your_assets')
    assets_intro
  
    vehicles.gather()
  
    real_estate.gather()
        
    set_progress(70)
    bank_assets.gather()
        
    other_assets.gather()
      
    nav.set_section('reasons')
    other_reasons_why_cannot_afford
    set_progress(80)
    
  set_progress(90)
  interview_order_VT_fee_waiver = True


---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  interview_order_VT_fee_waiver
  nav.set_section('review_VT_fee_waiver')
  trial_court.address.county
  VT_fee_waiver_preview_question
  

  nav.set_section('sign')
  signature_date
  set_progress(95)
  al_form_requires_digital_signature = False
  basic_questions_signature_flow
  
    # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "county_where_filing": showifdef("trial_court.address.county"),
          "court_division_where_filing": showifdef("trial_court.division_abbr"),
          "gets_public_benefits": showifdef("public_benefits.sources"),
          "employed": showifdef("employed"),
          "reached_interview_end": True,
          "num_forms": len(al_user_bundle.enabled_documents()),
      },
  )
  nav.set_section('get_docs')
  set_progress(100)
  VT_fee_waiver_download
---
#################################PUBLIC BENEFITS##############################
comment: |
  Notes on how a list is gathered
  
  Interview calls public_benefits.gather

  Gather looks for .there_are_any

  there_any_any asks for x.selected_types

  if any selected types,
   move_check_to_lists
     This creates a number of elements in the list, and deletes 'source' if other, (which may set 'source' to the default, like 'vehicle')
     also sets .moved for the list
     
  there_are_any is set to true

  will then look for complete

  check_for_others will set source

  complete calls for attribute (value for public_benefits) for information question
  
  information question calls display name (with reconsider to keep it fresh)
  
  answering the question sets display_name fresh with new source_other with validation code

  complete sets display  
---
id: public_benefits terms_ordered
variable name: public_benefits.terms_ordered
data: !!omap
  - reach up: "Reach Up"
  - 3squaresvt: "3SquaresVT (food)"
  - housing assistance: "Housing subsidy/voucher/Section 8"   
  - fuel assistance: "Fuel Assistance"
  - general assistance: "General Assistance (GA)"
  - ssi: "Supplemental Security Income (SSI)"
  - dr dynasaur: "Dr. Dynasaur"
  - medicaid: "Medicaid"
  - other: "Other"
---
id: public_benefits other display
comment: |
  This keeps the text that may be changed near the top of the public benefits section.
  Used in:
  Tell us about ______.
code: |
  public_benefits_other_display = "another benefit that provides you income"
---
id: public_benefits object
objects:
  - public_benefits: ALIncomeList.using(complete_attribute='complete')
---
id: public_benefits ordered object for checkboxes
objects:
  - public_benefits_ordered: DAOrderedDict.using(elements=public_benefits.terms_ordered, auto_gather=False, gathered=True)
---
id: ALIncomeList there are any
generic object: ALIncomeList
code: |
  if x.selected_types.any_true():
    x.move_checks_to_list(selected_terms=x.terms_ordered)
    x.there_are_any = True
  else:
    x.there_are_any = False
---
id: are there public benefits
#public_benefits
question: |
  Do you get public assistance?
subquestion: |
  Do you get any kind of government benefit that is based on need, disability, dependent children, or another reason based on your income?
  
  We've included a few examples below. You can also check "other."
  
  Check any that apply to you.
fields:
  - no label: public_benefits.selected_types
    datatype: checkboxes
    code: |
      public_benefits_ordered
---
id: ALIncome complete
generic object: ALIncome
code: |
  x.value
  x.complete = True
---
id: public benefits info for list
#generic object: ALIncomeList
reconsider: public_benefits[i].display_name
question: |
  Tell us about ${ public_benefits[i].display_name }.
subquestion: |
  % if i > 1:
  You have already told us about your benefits from ${ comma_and_list(public_benefit.display_name for public_benefit in public_benefits.complete_elements()) }.
  % elif i > 0:
  You have already told us about your benefits from ${ comma_and_list(public_benefit.display_name for public_benefit in public_benefits.complete_elements()) }.
  % endif
fields:
  - Source of income: public_benefits[i].source
    input type: dropdown
    code: |
      public_benefits_ordered
  - What type of income?: public_benefits[i].source_other
    show if:
      variable: public_benefits[i].source
      is: other
  - Times per year you receive this income: public_benefits[i].times_per_year
    input type: radio
    default: 12
    code: |
      times_per_year_list
  - Amount of income: public_benefits[i].value
    datatype: currency
validation code: |
  if public_benefits[i].source != "other":
    public_benefits[i].display_name = public_benefits.terms_ordered.get(public_benefits[i].source, public_benefits[i].source)
  else:
    public_benefits[i].display_name = public_benefits[i].source_other
---
id: public_benefits set display name
code: |
  if defined('public_benefits[i].source') and public_benefits[i].source != "other":
    public_benefits[i].display_name = public_benefits.terms_ordered.get(public_benefits[i].source, public_benefits[i].source)
  elif defined('public_benefits[i].source') and public_benefits[i].source == "other" and defined('public_benefits[i].source_other'):
    public_benefits[i].display_name = public_benefits[i].source_other
  else:
    public_benefits[i].display_name = public_benefits_other_display
---
id: public_benefits there is another
question: Do you want to add any more public benefits?
subquestion: |
  ${ public_benefits_table }
yesno: public_benefits.there_is_another
---
id: public_benefits revisit
continue button field: public_benefits.revisit
question: |
  Edit public assistance
subquestion: |
  ${ public_benefits_table }

  ${ public_benefits.add_action() }
---
id: public_benefits table
table: public_benefits_table
rows: public_benefits.complete_elements()
columns:
  - Source: |
      row_item.display_name if defined("row_item.source") else ""
  - Public benefits per month: |
      currency(row_item.total(times_per_year=12))
edit:
  - source
  - value
---
id: user qualifies due to benefits
continue button field: user_qualifies_interstitial
question: |
  You should qualify
subquestion: |
  If you get public assistance at this time, you should qualify for a 100% waiver of fees for your case.
  
  We can skip some of the questions in the form. 
  
  Click Next to answer a few more questions.
---
#################################OTHER INCOMES##############################
---
variable name: other_incomes.terms_ordered
data: !!omap
  - unemployment income: "Unemployment benefits"
  - child support income: "Child support"
  - other: "Other"
---
variable name: help_text
data: !!omap
  - unemployment income help: "Enter gross amount of unemployment income -- before taxes were taken out."
  - default: " "
---
## This keeps the text that may be changed near the top of the public benefits section.
code: |
  other_incomes_other_display = "other source of income"
---
objects:
  - other_incomes: ALIncomeList.using(complete_attribute='complete')
---
objects:
  - other_incomes_ordered: DAOrderedDict.using(elements=other_incomes.terms_ordered, auto_gather=False, gathered=True)
---
comment: |
  will use id: ALIncomeList there are any to set other_incomes.there_are_any
---
id: are there other incomes
#other_incomes
question: |
  Do you have other sources of income?
subquestion: |
  Check any that apply to you.
  
  Do not include employment income.
fields:
  - no label: other_incomes.selected_types
    datatype: checkboxes
    code: |
      other_incomes_ordered
  - note: |
      **Other kinds of income could include:** disability insurance?, social security?, workers compensation, veteran's income, rental income, interest income, spousal maintenance (alimony), retirement income and annuities.
---
comment: |
  will use id: ALIncome complete to set other_incomes[i].complete
---
id: other income info for list
#generic object: ALIncomeList
reconsider: other_incomes[i].display_name
question: |
  Tell us about your ${ other_incomes[i].display_name }.
subquestion: |
  % if i > 1:
  You have already told us about your incomes from ${ comma_and_list(public_benefit.display_name for public_benefit in other_incomes.complete_elements()) }.
  % elif i > 0:
  You have already told us about your income from ${ comma_and_list(public_benefit.display_name for public_benefit in other_incomes.complete_elements()) }.
  % endif
fields:
  - Source of income: other_incomes[i].source
    input type: dropdown
    code: |
      other_incomes_ordered
  - What type of income?: other_incomes[i].source_other
    show if:
      variable: other_incomes[i].source
      is: other
  - Times per year you receive this income: other_incomes[i].times_per_year
    input type: radio
    code: |
      times_per_year_list
  - Amount of income: other_incomes[i].value
    datatype: currency
  - note: |
      ${ help_text['unemployment income help'] }
    show if:
      variable: other_incomes[i].source
      is: unemployment income
  - note: |
      **Other kinds of income could include:** disability insurance?, social security?, workers compensation, veteran's income, rental income, interest income, spousal maintenance (alimony), retirement income and annuities.
validation code: |
  if other_incomes[i].source != "other":
    other_incomes[i].display_name = other_incomes.terms_ordered.get(other_incomes[i].source, other_incomes[i].source)
  else:
    other_incomes[i].display_name = other_incomes[i].source_other
---
code: |
  if defined('other_incomes[i].source') and other_incomes[i].source != "other":
    other_incomes[i].display_name = other_incomes.terms_ordered.get(other_incomes[i].source, other_incomes[i].source)
  elif defined('other_incomes[i].source') and other_incomes[i].source == "other" and defined('other_incomes[i].source_other'):
    other_incomes[i].display_name = other_incomes[i].source_other
  else:
    other_incomes[i].display_name = other_incomes_other_display
---
question: Do you want to add any more incomes?
yesno: other_incomes.there_is_another
subquestion: |
  ${ other_incomes_table }
---
continue button field: other_incomes.revisit
question: |
  Edit other incomes
subquestion: |
  ${ other_incomes_table }

  ${ other_incomes.add_action() }
---
table: other_incomes_table
rows: other_incomes.complete_elements()
columns:
  - Source: |
      row_item.display_name if defined("row_item.source") else ""
  - Income per month: |
      currency(row_item.total(times_per_year=12))
edit:
  - source
  - value
---
#################################JOBS##############################
---
id: work
question: |
  Work
fields:
  - "Do you get income from working?": employed
    datatype: yesnoradio
---
id: self employed income
question: |
  What do you make in self-employed income each month?
subquestion: |
  
  Most people report their net income from self-employment. To figure your monthly net income:
  
  - Look at your gross income over the last 12 months of self-employment. 
  - Subtract your business expenses over that time.
  - Then divide by 12.
  
  Or you can:
  
  - Look at your most recent IRS Schedule C form from your federal taxes.
  - Divide the net income by 12.
fields:
  - Your monthly net income: users1_income_self_employment_monthly_amount
    datatype: currency
---
generic object: ALItemizedJob
code: |
  x.source
  if not x.is_self_employed:
    x.employer.name.first
  x.wages_added
  x.to_add.gather()
  # x.to_subtract.gather()
  x.complete = True
---
generic object: ALItemizedValueDict
code: |
  x.complete = True
---
sets:
  - x.employer.name.first
id: employer
generic object: ALItemizedJob
question: |
  Tell us who employs you as a ${ x.source }
fields:
  - I am self-employed: x.is_self_employed
    datatype: yesno
  - Is this a part time job: x.is_part_time
    datatype: yesnoradio
  - Employer's name: x.employer.name.first
    show if:
      variable: x.is_self_employed
      is: False
  - note: |
      ---

      Employer's contact information
    show if:
      variable: x.is_self_employed
      is: False
  - Street address: x.employer.address.address
    show if:
      variable: x.is_self_employed
      is: False
  - Unit: x.employer.address.unit
    required: False
    show if:
      variable: x.is_self_employed
      is: False
  - City: x.employer.address.city
    show if:
      variable: x.is_self_employed
      is: False
  - State: x.employer.address.state
    show if:
      variable: x.is_self_employed
      is: False
  - Zip or postal code: x.employer.address.zip
    show if:
      variable: x.is_self_employed
      is: False
---
generic object: ALItemizedJob
code: |
  if x.is_part_time:
    x.to_add.there_are_any = True
    x.to_add.new_item_name = "part time"
  else:
    x.to_add.there_are_any = True
    x.to_add.new_item_name = "full time"
  x.wages_added = True
---
#generic object: ALItemizedJob
#code: |
#  jobs[x]to_subtract.there_are_any = False
---
id: other itemized job income value
generic object: ALItemizedJob
question: |
  Edit your ${ job_items_names.get(i, i) } in your job as a ${ x.source }
fields:
  - Amount: x.to_add[i].value
    datatype: currency
    hide if:
      code: x.is_hourly is True
  - Your hourly pay rate: x.to_add[i].value
    datatype: currency
    show if:
      code: x.is_hourly is True
        
  - How often do you get paid this amount?: x.to_add[i].times_per_year
    input type: radio
    code: |
      times_per_year_list
    datatype: integer
    hide if:
      code: x.is_hourly is True
  - How often do you get paid?: x.to_add[i].times_per_year
    input type: radio
    code: |
      times_per_year_list
    datatype: integer
    show if:
      code: x.is_hourly is True
  #- Do you have other additional income from this job? (Examples -- Tips, commissions, bonuses): x.to_add.there_is_another
    #datatype: yesnoradio
---
if: j in ["full time","part time"]
id: itemized job period
generic object: ALItemizedJob
question: |
  Details about ${ j } compensation for your ${ jobs[i].source } job
fields:
  - Paid hourly or salary?: jobs[i].to_add[j].is_hourly
    input type: radio
    choices:
      - Hourly: True
      - Salary: False
  - label: |
      What is your hourly pay for this job?
    field: jobs[i].to_add[j].value
    datatype: currency
    show if: 
      variable: jobs[i].to_add[j].is_hourly
      is: True
  - label: |
      What do you get for wages during each pay period (x.times_per_year)?
    field: jobs[i].to_add[j].value
    datatype: currency
    show if: 
      variable: jobs[i].to_add[j].is_hourly
      is: False
  - How often  are you paid?: jobs[i].to_add[j].times_per_year
    input type: radio
    code: |
      times_per_year_list
    datatype: integer
  - How many hours are worked during that time?: jobs[i].to_add[j].hours_per_period
    datatype: number
    show if: 
      variable: jobs[i].to_add[j].is_hourly
      is: True
    validation messages:
      number: |
        Enter a number, like 40. If you don't know, enter your best guess.
  - Does the job have other incomes, like tips, commissions or bonuses?: jobs[i].to_add.there_is_another
    datatype: yesnoradio
---
if: j not in ["full time","part time"]
id: itemized job period
generic object: ALItemizedJob
question: |
  Details about ${ j } compensation for your ${ jobs[i].source } job
fields:
  - label: |
      Amount
    field: jobs[i].to_add[j].value
    datatype: currency
  - How often  are you paid?: jobs[i].to_add[j].times_per_year
    input type: radio
    code: |
      times_per_year_list
    datatype: integer
  - Does the job have other incomes, like tips, commissions or bonuses?: jobs[i].to_add.there_is_another
    datatype: yesnoradio
---
code: |
  if j not in ["full time","part time"]:
    jobs[i].to_add[j].is_hourly = False
---
question: Are there more types of non-wage income for your job  as a ${ x.source }?
subquestion: |
  You have already mentioned:
  ${ x.to_add.true_values() }
fields:
  - Does the job have other incomes, like tips, commissions or bonuses?: x.to_add.there_is_another
    datatype: yesnoradio
---
id: jobs details about tips commissions bonuses
generic object: ALItemizedJob
question: |
  Other incomes from your job as a ${ x.source }
subquestion: |
  You have already told us about your income from **${comma_and_list( [job_items_names.get(key, key).lower() for key in x.to_add.complete_elements().keys()] )}**.
fields:
  - What kind of additional income do you get from this job? (Examples -- Tips, commissions, bonuses): x.to_add.new_item_name
    datatype: radio
    choices:
      - Tips
      - Commissions
      - Bonuses
      - Other
  - Specify: x.to_add.new_item_name
    show if:
      variable: x.to_add.new_item_name
      is: "Other"
validation code: |
  if x.to_add.new_item_name in x.to_add.complete_elements().keys():
    validation_error(f'You already told us about your <strong>{job_items_names.get(x.to_add.new_item_name, x.to_add.new_item_name) }</strong> that pays { currency( x.to_add[ x.to_add.new_item_name ].value )}. Pick a different name.')

---
id: edit wages and other incomes from a job
generic object: ALItemizedJob
continue button field: x.to_add.revisit
question: |
  Edit incomes from ${ x.source }
subquestion: |
  ${ x.to_add.table }

  ${ x.to_add.add_action() }
---
generic object: ALItemizedValueDict
table: x.to_add.table
rows: x
columns:
  - Type: |
      str(row_index).replace("_", " ").lower().capitalize()
  - Amount per hour or other time period: |
      '$0' if hasattr(row_item, 'exists') and not row_item.exists else currency(row_item.value)
  
edit:
  #- exists
  - is_part_time
  - is_hourly
  - times_per_year
  - value
---
generic object: ALItemizedValueDict
table: x.table
rows: x
columns:
  - Type: |
      str(row_index).replace("_", " ").lower().capitalize()
  - Amount: |
      '$0' if hasattr(row_item, 'exists') and not row_item.exists else currency(row_item.value)
edit:
  #- exists
  - is_part_time
  - is_hourly
  - times_per_year
  - value
---
id: job review
question: |
  Review your jobs
subquestion: |
  Here is what you've told us about your jobs. You can add more or continue
  to the next question.

  ${ jobs.table }
  

  ${ jobs.add_action() }
field: review_jobs
---
table: jobs.table
rows: jobs
columns:
  - Job title: |
      row_item.source
  - Employer: |
      row_item.employer.name if hasattr(row_item.employer.name, "first") else ""
  - Monthly Gross Income: |
      currency(row_item.gross_total(times_per_year=12))

edit:
  - revisit
confirm: True
---
generic object: ALItemizedJob
question: Review
fields:
  - Job: x.source
  - I am self-employed: x.is_self_employed
    datatype: yesno
  - Employer's name: x.employer.name.first
    show if:
      variable: x.is_self_employed
      is: False
  - note: |
      ---

      Employer's contact information
    show if:
      variable: x.is_self_employed
      is: False
  - Street address: x.employer.address.address
    show if:
      variable: x.is_self_employed
      is: False
  - Unit: x.employer.address.unit
    required: False
    show if:
      variable: x.is_self_employed
      is: False
  - City: x.employer.address.city
    show if:
      variable: x.is_self_employed
      is: False
  - State: x.employer.address.state
    show if:
      variable: x.is_self_employed
      is: False
  - Zip or postal code: x.employer.address.zip
    show if:
      variable: x.is_self_employed
      is: False
under: |
  ${ x.to_add.table }

  ${ x.to_add.add_action() }  
continue button field: x.revisit
---
generic object: ALItemizedValueDict
table: x.table
rows: x
columns:
  - Type: |
      str(row_index).replace("_", " ").lower().capitalize()
  - Amount: |
      '$0' if hasattr(row_item, 'exists') and not row_item.exists else currency(row_item.value)
  
edit:
  #- exists
  - is_part_time
  - is_hourly
  - times_per_year
  - value

---
###############################INTRO SCREENS###############################
---
id: basic questions intro screen
decoration: form-lineal
question: |
  ${interview_short_title}
subquestion: |  

  <p>${ intro_vtcourtforms_3_steps }</p>
  
  <i class="fas fa-file-text fa-2x"></i> This guided interview will produce a completed Application to Waive Filing Fees and Service Costs for Vermont courts -- form 600-00228. If approved by the Vermont Judiciary, you will not have to pay the court to start a court action.
  
    <i class="fas fa-clock fa-2x"></i>  It may take you between 10 and 40 minutes to complete this interview. If you want, you can create an account and save your work to return to later.

  <i class="fas fa-circle-info fa-2x"></i> It is free to use this program. This site is not a lawyer.
  
  Visit the [VTLawHelp.org website](https://vtlawhelp.org) for information about civil legal issues.

  <p>${ intro_vtcourtforms_created_by }</p>

fields:
  - To continue, please accept our [terms of use](https://vtlawhelp.org/vtcourtforms/terms-of-use).: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: al_intro_screen
---
id: VT fee waiver intro
continue button field: VT_fee_waiver_intro
question: |
  Do you need the fee waiver form?
subquestion: |

  Before you begin, check to be sure you actually need to pay a court filing fee.
  
  * When you ask the court for a Relief from Abuse (RFA) order, there is no court filing fee.
  * If you are submitting an Answer to a court action, you usually don't have a court filing fee.
  * Visit the Vermont Judiciary website to learn more about [filing fees](https://www.vermontjudiciary.org/fees) and [asking to file court papers for free in Vermont](https://www.vermontjudiciary.org/self-help/application-waive-filing-fees-and-service-costs).
  
  **What you will need to complete this form**
  
  For this guided interview, you will need to know:
  
  * the name and address of any employer you might have
  * any public benefits that you get (like 3SquaresVT food help, ReachUp help for families, SSDI, etc.), and
  * information about the court case for which you want a fee waiver. (You can find this information on other court papers you have about this case. If you are starting a court action -- like filing for divorce -- you won't have a case number or docket number yet.)
  
  If you get public benefits, that's all you need. **If you don't get public benefits**, you will also need to know:
  
  * your income -- If you work or get unemployment, have those paystubs on hand. If you get child support, have that information on hand. If you are self-employed, have your IRS Schedule C on hand or have your income and business expenses from the last 12 months.
  * your expenses (like rent, utilities, insurance payments, child care, etc.) -- looking back over the last 12 months
  * the amount of money you have in the bank and on hand
  * the value of your vehicle/car, real estate/home, and any other major things you might own, and
  * if filling out form on behalf of a minor or incompetent adult, you need that person’s information.

---
id: important_notes_to_user
question: |
  Important
subquestion: |  
  <i class="fa fa-exclamation-circle fa-2x"></i>  This program does **not** file your fee waiver form with the court. You will need to do this yourself. We will give you instructions when you finish the form.
  
  This program **cannot** tell you if you qualify for sure. The court clerk will consider all of the information you provide.
    
    Let's get started. Tap the Next button.
continue button field: important_notes_to_user
---
###############################ABOUT COURT CASE###############################
---
id: choose a court
question: |
  What court is your case in?
fields:
  - note: |
      Choose the court division and the county court where you will file this form. 
      
      If there's an existing court case, choose the division and county that the case is in. Look at the papers from the court.
      
      Not sure what county you are in? [Check this list of cities and towns to find the county.](https://en.m.wikipedia.org/wiki/List_of_municipalities_in_Vermont#Cities)

  - Division: trial_court_division
    code: sorted(all_courts.unique_column_values('division_abbr'))
    
  - County: user_selected_county
    code: sorted(all_courts.unique_column_values('branch'))
---
id: Court case information
question: |
  Court case information
subquestion: |
  What is the name of the court case you are involved in?
fields:
  - "Case name, as seen on your court papers (example: Kramer vs. Kramer)": case_name
    maxlength: 80
  - note: |
      If you are starting a case, type in your name (the plaintiff's name) "vs." the other party (the defendant's name).
---
###############################USERS INFO###############################
---
id: Gather users street address
sets:
  - users[0].address.address
  - users[0].address.city
  - users[0].address.zip
  - users[0].address.unit
  - users[0].address.state
question: |
  What is your address?
  
fields:
  - code: |
      users[0].address_fields(default_state=AL_DEFAULT_STATE)
  - I have a mailing address that is different from my street address: users1_mailing_address_different
    datatype: yesno
  - Mailing address: users[0].mailing_address.address
    address autocomplete: True
    show if: users1_mailing_address_different
  - Unit: users[0].mailing_address.unit
    required: False
    show if: users1_mailing_address_different
  - City: users[0].mailing_address.city
    show if: users1_mailing_address_different
  - State: users[0].mailing_address.state
    code: |
      states_list()
    default: VT
    show if: users1_mailing_address_different
  - Zip or postal code: users[0].mailing_address.zip
    required: False
    show if: users1_mailing_address_different

---
id: About you
question: |
  About you and your household
subquestion: |
  How many people live in your household? Include yourself, any spouse, partner, and dependants such as children.
fields:
  - "Household size": household_size
    datatype: integer
    min: 0
---
id: your contact information
question: |
  What is your contact information?
subquestion: |
  Include **at least one** way to reach you other than by mail.

  If you do not have a phone number or email, use a trusted friend's phone number. But the friend must be someone you can rely on to give you a message.

fields:  
  - Daytime phone number: users[0].daytime_phone_number
    datatype: al_international_phone
    required: False
  - Email address: users[0].email    
    datatype: email
    required: False

validation code: |
  if (not showifdef('users[0].daytime_phone_number') and \
      (not showifdef('users[0].email')) and \
      (not showifdef('users[0].other_contact_method'))):
    validation_error(word("You need to provide at least one contact method."), field="users[0].other_contact_method")
---
continue button field: users.revisit
question: |
  Edit info about you
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - Mailing address: |
      row_item.mailing_address.block() if defined("row_item.mailing_address.address") else ""
  - Email: |
      row_item.email if defined("row_item.email") else ""
  - Phone number: |
      row_item.daytime_phone_number if defined("row_item.daytime_phone_number") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
edit:
  - name.first
  - address.address
  - mailing_address.address
  - email
  - daytime_phone_number
  - signature
confirm: True
---
###############################EXPENSES#############################
---
id: expenses intro
mandatory: True
continue button field: expenses_intro
question: |
  Expenses
subquestion: |
  Now we will review your expenses -- the things you pay for.
  
  Tap the Next button.
---
# "!!omap" makes these terms ordered
# their order here will be their same order when shown to users.
variable name: expenses.terms_ordered
data: !!omap
  - rent: "Rent"
  - mortgage: "Mortgage"
  - electric: "Electric"
  - phone: "Phone"
  - fuel: "Fuel (heat and/or gas)"
  - property tax: "Property taxes"
  - food: "Food"
  - clothing: "Clothing and shoes"
  - medical: "Medical costs"
  - health insurance: "Health insurance"
  - auto loan: "Auto loan payment"
  - auto insurance: "Auto insurance"
  - other insurance: "Other insurance"
  - child support: "Child support payment"
  - other: "Other expenses"
---
code: |
  expenses_other_display = "another expense"
---
objects:
  - expenses: ALExpenseList.using(complete_attribute='complete')
---
objects:
  - expenses_ordered: DAOrderedDict.using(elements=expenses.terms_ordered, auto_gather=False, gathered=True)
---
generic object: ALExpenseList
#expenses
id: expenses types
question: |
  What kind of expenses do you have?
subquestion: |
  Be sure to look back over the last 12 months. Maybe you didn't have the expense last month, but you had it earlier in the year.
fields:
  - no label: x.selected_types
    datatype: checkboxes
    code: |
      expenses_ordered
  - note: |
      **"Other expenses" you might enter:** child care, kids activities, family activities, school lunches, supplies and tuition, sports equipment, school lunches, meals eaten out, vacations, haircuts, toiletries, diapers, laundry, internet, cable, reading materials, gifts, donations, union dues, tobacco, alcohol, furniture, home repairs, mowing, trash, plowing, property taxes, water/sewer bills, car maintenance and repairs, gasoline, pet expenses, and more.

      **"Other insurance" you might enter:** dental, vision, home, rental, life insurance and more.
---
generic object: ALExpense
code: |
  x.value
  x.complete = True
---
generic object: ALExpenseList
need:
  - x[i].source
  - x[i].display_name
id: expense information, prefilled
question: |
  How much do you spend on ${ x[i].display_name.lower() }?
subquestion: |
  **Tip**: You can look back 12 months for this expense. That will give an accurate picture of how much the expense really is.
  
  If you have more than one ${ x[i].display_name.lower() }
  expense in your household, you'll have a chance to add another later on.
fields:
  - Amount: x[i].value
    datatype: currency
#  - Other (explain): x[i].source_other
#    show if:
#      variable: x[i].source
#      is: other
  - How often do you pay this amount?: x[i].times_per_year
    input type: radio
    default: 12
    code: |
      times_per_year_for_expenses
---
generic object: ALExpenseList
id: expense information
reconsider: expenses[i].display_name
question: |
  Tell us about your ${ expenses[i].display_name }.
subquestion: |
  **Tip**: You can look back 12 months for this expense. That will give an accurate picture of how much the expense really is.
fields: 
  - Type of expense: x[i].source
    code: |
      expenses_ordered
  - Other (explain): x[i].source_other
    show if:
      variable: x[i].source
      is: other
  - Amount: x[i].value
    datatype: currency
  - How often do you pay this amount?: x[i].times_per_year
    input type: radio
    default: 12
    code: |
      times_per_year_for_expenses
  - note: |
      **"Other expenses" you might enter:** child care, kids activities, family activities, school lunches, supplies and tuition, sports equipment, school lunches, meals eaten out, vacations, haircuts, toiletries, diapers, laundry, internet, cable, reading materials, gifts, donations, union dues, tobacco, alcohol, furniture, home repairs, mowing, trash, plowing, property taxes, water/sewer bills, car maintenance and repairs, gasoline, pet expenses, and more.

      **"Other insurance" you might enter:** dental, vision, home, rental, life insurance and more.

validation code: |
  if expenses[i].source != "other":
    expenses[i].display_name = expenses.terms_ordered.get(expenses[i].source, expenses[i].source)
  else:
    expenses[i].display_name = expenses[i].source_other
---
code: |
  if defined('expenses[i].source') and expenses[i].source != "other":
    expenses[i].display_name = expenses.terms_ordered.get(expenses[i].source, expenses[i].source)
  elif defined('expenses[i].source') and expenses[i].source == "other" and defined('expenses[i].source_other'):
    expenses[i].display_name = expenses[i].source_other
  else:
    expenses[i].display_name = expenses_other_display
---
question: Do you want to add any more expenses?
yesno: expenses.there_is_another
subquestion: |
  ${ expenses_table }
---
continue button field: expenses.revisit
question: |
  Edit expenses
subquestion: |
  ${ expenses_table }

  ${ expenses.add_action() }
---
comment: |
  I don't think this is used and it can be deleted
generic object: ALExpenseList
table: x.table
rows: x
columns:
  - Type: |
      row_item.display_name
  - Amount per month: |
      currency(row_item.total(times_per_year=12))
edit:
  - source
  - value
  - display_name

---
table: expenses_table
rows: expenses.complete_elements()
columns:
  - Type: |
      row_item.display_name.lower()
  - Amount per month: |
      currency(row_item.total(times_per_year=12))
edit:
  - source
  - value
---
id: assets intro
mandatory: True
continue button field: assets_intro
question: |
  Assets
subquestion: |
  Now we will review the things that you own — your "assets" or property.

  Tap the Next button.
---
################ VEHICLES CARS TRUCKS ################
---
variable name: vehicles.terms_ordered
data: !!omap
  - car: "Car"
  - truck: "Truck"
  - motorcycle: "Motorcycle"
  - boat: "Boat or jetski"
  - snowmobile: "Snowmobile"
  - atv: "ATV"
  - camper: "Camper"
  - RV: "RV"
  - plane: "Plane"
  - other: "Other"
---
comment: |
  used in this display line
  About your ___
code: |
  vehicles_other_display = "other vehicle"
---
objects:
  - vehicles: ALVehicleList.using(complete_attribute='complete')
---
objects:
  - vehicles_ordered: DAOrderedDict.using(elements=vehicles.terms_ordered, auto_gather=False, gathered=True)
---
id: vehicles there are any
generic object: ALVehicleList
code: |
  if x.selected_types.any_true():
    x.move_checks_to_list(selected_terms=x.terms_ordered)
    x.there_are_any = True
  else:
    x.there_are_any = False
---
id: are there vehicles
#vehicles
question: |
  Do you have any cars, trucks or other vehicles?
subquestion: |
   Check any that apply to you.
fields:
  - no label: vehicles.selected_types
    datatype: checkboxes
    code: |
      vehicles_ordered
---
id: vehicles complete
generic object: ALVehicleList
code: |
  x[i].market_value
  x[i].complete = True
---
id: info for each vehicle
reconsider: vehicles[i].display_name
question: |
  About your ${ vehicles[i].display_name }
subquestion: |
  Make your best guess when answering these questions.
fields:
  - Type of vehicle: vehicles[i].source
    code: |
      vehicles_ordered
  - Other (explain): vehicles[i].source_other
    show if:
      variable: vehicles[i].source
      is: other
  - What make / manufacturer? (Examples - Honda or Ford): vehicles[i].make
  - What model? (Examples - Civic or F-150): vehicles[i].model
    maxlength: 20
  - What year?: vehicles[i].year
  - What is its market value? How much would you get if you sold it?: vehicles[i].market_value
    datatype: currency
  - If you have a loan or owe money on the ${ vehicles[i].source }, how much do you owe? Enter 0 if you own it outright.: vehicles[i].balance
    datatype: currency
validation code: |
  if vehicles[i].source != "other":
    vehicles[i].display_name = vehicles.terms_ordered.get(vehicles[i].source, vehicles[i].source)
  else:
    vehicles[i].display_name = vehicles[i].source_other
---
code: |
  if defined('vehicles[i].source') and vehicles[i].source != "other":
    vehicles[i].display_name = vehicles.terms_ordered.get(vehicles[i].source, vehicles[i].source)
  elif defined('vehicles[i].source') and vehicles[i].source == "other" and defined('vehicles[i].source_other'):
    vehicles[i].display_name = vehicles[i].source_other
  else:
    vehicles[i].display_name = vehicles_other_display
---
question: Do you want to add any more vehicles?
yesno: vehicles.there_is_another
subquestion: |
  ${ vehicles_table }
---
continue button field: vehicles.revisit
question: |
  Edit vehicles
subquestion: |
  ${ vehicles_table }

  ${ vehicles.add_action() }
---
table: vehicles_table
rows: vehicles.complete_elements()
columns:
  - Description: |
      row_item.year_make_model() if defined("row_item.year_make_model()") else ""
  - Market value: |
      currency(row_item.market_value) if defined("row_item.market_value") else ""
  - Amount owed: |
      currency(row_item.balance) if defined("row_item.balance") else ""
edit:
  - make
  - model
  - year
  - market_value
  - balance
---
################ REAL ESTATE ################
---
id: real_estate terms_ordered
variable name: real_estate.terms_ordered
data: !!omap
  - primary residence: "Primary residence (where you live)"
  - mobile home: "Mobile home"
  - second home: "Second home"
  - camp: "Camp"
  - timeshare: "Timeshare"
  - land: "Unimproved land"
  - rental: "Residential rental property you own"
  - commercial: "Commercial real estate"
  - other: "Other real estate"
---
id: real_estate other display
comment: |
  This keeps the text that may be changed near the top of the public benefits section.
  Used in:
  Tell us about your ______.
code: |
  real_estate_other_display = "other real estate"
---
id: real_estate object
objects:
  - real_estate: ALAssetList.using(complete_attribute='complete')
---
id: real_estate ordered object for checkboxes
objects:
  - real_estate_ordered: DAOrderedDict.using(elements=real_estate.terms_ordered, auto_gather=False, gathered=True)
---
comment: |
  This uses id: ALIncomeList there are any because  An ALAssetList is an ALIncomeList, but there may be a generic ALAssetList for there_are_any that would take precedence
---
id: is there real estate
#real_estate
question: |
  Do you have any real estate?
subquestion: |
   For example, do you own your home?
   
   Check any that apply to you.
fields:
  - no label: real_estate.selected_types
    datatype: checkboxes
    code: |
      real_estate_ordered
---
code: |
  real_estate[i].market_value
  real_estate[i].complete = True
---
id: info for each real estate
reconsider: real_estate[i].display_name
question: |
  Tell us about your ${ real_estate[i].display_name }.
subquestion: |
  Make your best guess for the market value.

  % if i > 1:
  You have already told us about your ${ comma_and_list(public_benefit.display_name for public_benefit in real_estate.complete_elements()) }.
  % elif i > 0:
  You have already told us about your ${ comma_and_list(public_benefit.display_name for public_benefit in real_estate.complete_elements()) }.
  % endif
fields:
  - Type of real estate: real_estate[i].source
    code: |
      real_estate_ordered
  - Other (explain): real_estate[i].source_other
    show if:
      variable: real_estate[i].source
      is: other
  - What is its market value? How much would you get if you sold it?: real_estate[i].market_value
    datatype: currency
  - If you have a mortgage, lien or owe money on the real estate, how much do you owe? Enter 0 if you own it outright.: real_estate[i].balance
    datatype: currency
  #- Town/city where the real estate is located. Example -- Rutland: real_estate[i].description
    #maxlength: 76
validation code: |
  if real_estate[i].source != "other":
    real_estate[i].display_name = real_estate.terms_ordered.get(real_estate[i].source, real_estate[i].source)
  else:
    real_estate[i].display_name = real_estate[i].source_other
---
id: real_estate set display name
code: |
  if defined('real_estate[i].source') and real_estate[i].source != "other":
    real_estate[i].display_name = real_estate.terms_ordered.get(real_estate[i].source, real_estate[i].source)
  elif defined('real_estate[i].source') and real_estate[i].source == "other" and defined('real_estate[i].source_other'):
    real_estate[i].display_name = real_estate[i].source_other
  else:
    real_estate[i].display_name = real_estate_other_display
---
id: real_estate there is another
question: Do you want to add any more real estate?
yesno: real_estate.there_is_another
subquestion: |
  ${ real_estate_table }
---
id: real_estate revisit
continue button field: real_estate.revisit
question: |
  Edit real estate
subquestion: |
  ${ real_estate_table }

  ${ real_estate.add_action() }
---
id: real_estate table
table: real_estate_table
rows: real_estate.complete_elements()
columns:
  - Description: |
      row_item.display_name if defined("row_item.source") else ""
  - Market value: |
      currency(row_item.market_value) if defined("row_item.market_value") else ""
  - Amount owed: |
      currency(row_item.balance) if defined("row_item.balance") else ""
edit:
  - source
  - market_value
  - balance
---
################ OTHER ASSETS ################
---
id: other_assets terms_ordered
# "!!omap" makes these terms ordered
# their order here will be their same order when shown to users.
variable name: other_assets.terms_ordered
data: !!omap
  - tools: "Tools"
  - equipment: "Equipment"
  - electronics: "Electronics"
  - stocks: "Stocks"
  - bonds: "Bonds"
  - other: "Other"
---
id: other_assets other display
comment: |
  This keeps the text that may be changed near the top of the public benefits section.
  Used in:
  Tell us about your ______.
code: |
  other_assets_other_display = "other asset"
---
id: other_assets object
objects:
  - other_assets: ALAssetList.using(complete_attribute='complete')
---
id: other_assets ordered object for checkboxes
objects:
  - other_assets_ordered: DAOrderedDict.using(elements=other_assets.terms_ordered, auto_gather=False, gathered=True)
---
comment: |
  will use id: ALIncomeList there are any
---
id: other assets
question: |
  Other large assets that you have not entered already
subquestion: |   
  Check any that apply to you.
fields:
  - no label: other_assets.selected_types
    datatype: checkboxes
    code: |
      other_assets_ordered
---
id: other_assets complete
code: |
  other_assets[i].market_value
  other_assets[i].complete = True
---
id: describe other asset
reconsider: other_assets[i].display_name
question: |
  Tell us about your ${ other_assets[i].display_name }.
subquestion: |

  Make your best guess for the market value.
  
  % if i > 1:
  You have already told us about your ${ comma_and_list(other_asset.display_name for other_asset in other_assets.complete_elements()) }.
  % elif i > 0:
  You have already told us about your ${ comma_and_list(other_asset.display_name for other_asset in other_assets.complete_elements()) }.
  % endif
fields:
  - Type of asset: other_assets[i].source
    code: |
      other_assets_ordered
  - Other (explain): other_assets[i].source_other
    show if:
      variable: other_assets[i].source
      is: other
  - What is its market value? How much would you get if you sold it?: other_assets[i].market_value
    maxlength: 76
    datatype: currency
  - note: |
      Other assets may be things like tools, equipment, electronics, computers, stocks, bonds, etc.
validation code: |
  if other_assets[i].source != "other":
    other_assets[i].display_name = other_assets.terms_ordered.get(other_assets[i].source, other_assets[i].source)
  else:
    other_assets[i].display_name = other_assets[i].source_other
---
id: other_assets set display name
code: |
  if defined('other_assets[i].source') and other_assets[i].source != "other":
    other_assets[i].display_name = other_assets.terms_ordered.get(other_assets[i].source, other_assets[i].source)
  elif defined('other_assets[i].source') and other_assets[i].source == "other" and defined('other_assets[i].source_other'):
    other_assets[i].display_name = other_assets[i].source_other
  else:
    other_assets[i].display_name = other_assets_other_display
---
question: Do you want to add any more other assets?
yesno: other_assets.there_is_another
subquestion: |
  ${ other_assets_table }
---
continue button field: other_assets.revisit
question: |
  Edit other assets
subquestion: |
  ${ other_assets_table }

  ${ other_assets.add_action() }
---
table: other_assets_table
rows: other_assets.complete_elements()
columns:
  - Description: |
      row_item.source if defined("row_item.source") else ""
  - Market value: |
      currency(row_item.market_value) if defined("row_item.market_value") else ""
  - Amount owed: |
      currency(row_item.balance) if defined("row_item.balance") else ""
edit:
  - source
  - market_value
  - balance

---
###############BANK ASSETS####################
---
id: bank_assets terms_ordered
variable name: bank_assets.terms_ordered
data: !!omap
  - checking account: "Checking accounts"
  - savings account: "Savings accounts"
  - cash on hand: "Cash on hand"
---
id: bank_assets object
objects:
  - bank_assets: ALAssetList.using(complete_attribute='market_value')
---
id: bank_assets ordered object for checkboxes
objects:
  - bank_assets_ordered: DAOrderedDict.using(elements=bank_assets.terms_ordered, auto_gather=False, gathered=True)
---
id: are there bank assets
#bank_assets
question: |
  Do you have money on hand or in the bank?
subquestion: |
   Check any that apply to you.
fields:
  - no label: bank_assets.selected_types
    datatype: checkboxes
    code: |
      bank_assets_ordered
---
id: info for each asset
question: |
  About your cash and bank assets
fields:
  - Source: bank_assets[i].source
    input type: dropdown
    code: |
      bank_assets_ordered
  - Current value: bank_assets[i].market_value
    datatype: currency
    required: False
---
id: bank assets display names
code: |
  bank_assets[i].display_name = bank_assets.terms_ordered.get(bank_assets[i].source, bank_assets[i].source)
---
id: bank_assets there is another
question: Do you want to add any more bank assets?
yesno: bank_assets.there_is_another
subquestion: |
  ${ bank_assets_table }
---
id: bank_assets revisit
continue button field: bank_assets.revisit
question: |
  Edit bank accounts and cash
subquestion: |
  ${ bank_assets_table }

  ${ bank_assets.add_action() }
---
id: bank_assets table
table: bank_assets_table
rows: bank_assets.complete_elements()
columns:
  - Source: |
      row_item.display_name if defined("row_item.source") else ""
  - Value: |
      currency(row_item.market_value) if defined("row_item.market_value") else ""
edit:
  - source
  - market_value
---
#############################OTHER REASONS#############################
---
id: more information
question: |
  More information
subquestion: |
  Tell us about other reasons why you cannot afford the court fees. (optional)
fields:
  - "Reason(s)": other_reasons_why_cannot_afford
    input type: area
    maxlength: 1000
    required: False
  - note: |
      **We’re ready to generate your draft form so you can review it!** It will take a moment after you tap the Next button.

#${ after_last_question_we_will_generate_your_forms }
---
#############################SIGNATURE#############################
---
id: User signature
question: |
  User signature
continue button field: User_signature
---
id: signature choice
decoration: file-signature
question: |
  Your documents are almost ready
subquestion: |
  How do you want to sign them?
fields: 
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
    show if:
      code: |
        al_form_requires_digital_signature
  - I will sign: signature_choice
    input type: radio
    choices:
      - On my computer or phone: this_device
      - On the paper with a pen after I print the documents: sign_after_printing
    show if:
      code: |
        not al_form_requires_digital_signature
continue button field: saw_signature_choice    
---

#####################PREVIEW SCREEN#######################
---
id: preview VT_fee_waiver
question: |
  Preview your form before you sign it
subquestion: |
  
  Here is a preview of the form you will sign on the next page. 
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit your answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_VT_fee_waiver'), label='Edit your answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: VT_fee_waiver_preview_question    
---
code: |
  signature_fields = ['users[0].signature']
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  addresses_to_search = [user.address for user in users]
  
  
  

#####################REVIEW SCREEN#######################
---
id: VT fee waiver review screen
event: review_VT_fee_waiver
question: |
  Review your answers
subquestion: |  
  ${ review_screen_instructions }

  ###Your court case
  
review:
  - Edit: 
    - trial_court_division
    - recompute:
      - trial_court_index
      - trial_court
    button: |
      
      **Is in this court division**: ${ trial_court.division_abbr }
      
      **Is in this county**: ${( trial_court.address.county )} County

  - Edit: docket_number
    button: |
      **Docket number**:
      ${ docket_number }      
  - Edit: case_name
    button: |
      **Case name**:
      ${ case_name }
      
  - note: |
      ###About you
  - Edit: users.revisit
    button: |
      **Your name and contact information**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: household_size
    button: |
      **Number of people in your household**:
      ${ household_size }
      
      
  - note: |
      ###Income

      
  - Edit: 
      - public_benefits.revisit
      - recompute:
        - public_benefits.gathered   
    button: |
      **Public assistance**
      
      % for benefit in public_benefits.complete_elements():
      * ${ benefit.display_name }
      % endfor

      % if not public_benefits.there_are_any:
      - None
      % endif

  - Edit: jobs.revisit
    button: |
      **Jobs**

      % if not employed:
      - None
      % endif
      
      % for item in jobs:
      * ${ item.source } / ${ item.employer.name }
      % endfor     
      
  - Edit: 
      - other_incomes.revisit
      - recompute:
        - other_incomes.gathered
    button: |
      **Other incomes**:

      % for income in other_incomes.complete_elements():
      * ${ income.display_name.lower() }
      % endfor

      % if not other_incomes.there_are_any:
      - None
      % endif
         
  - Edit: users1_income_self_employment_monthly_amount
    button: |
      **Self employed**:
      
      % if defined("users1_income_self_employment_monthly_amount"):
        - Yes     
      % else:
        - No
      % endif     
      
      
  - note: |
      ###Expenses 
  - Edit: expenses.revisit
    button: |
      **Expenses**:

      % if not expenses.selected_types.any_true():
      - None
      % endif
      
      % for item in expenses:
      - ${ item.display_name.lower() }
      
      % endfor

 
  - note: |
      ###Assets      
      
  - Edit: vehicles.revisit
    button: |
      **Vehicles**
      
      % for item in vehicles:
      * ${ item.make } ${ item.model } ${ item.year }          
      % endfor
      % if not vehicles.there_are_any:
      - None
      % endif
  - Edit: 
      - real_estate.revisit
      - recompute:
        - real_estate.gathered
    button: |
      **Real estate**

      % for item in real_estate.complete_elements():
      * ${ item.display_name }       
      % endfor
      % if not real_estate.there_are_any:
      - None
      % endif

  - Edit: 
      - bank_assets.revisit
      - recompute:
        - bank_assets.gathered   
    button: |
      **Bank accounts and cash**
      
      % for item in bank_assets.complete_elements():
      * ${ item.display_name.lower() }
      % endfor

      % if not bank_assets.there_are_any:
      - None
      % endif   
      
  - Edit: other_assets.revisit
    button: |
      **Other assets**

      % for item in other_assets.complete_elements():
        - ${ item.display_name }
      % endfor

      % if not other_assets.there_are_any:
      - None
      % endif      
      
  - Edit: other_reasons_why_cannot_afford
    button: |
      **Other reason(s) you cannot afford the fees (optional question)**:
      
      % if defined("other_reasons_why_cannot_afford"):
      ${ other_reasons_why_cannot_afford }
      % endif
      % if not defined("other_reasons_why_cannot_afford"):
      - None
      % endif
  - Edit: signature_date
    button: |
      **Date of signature for these forms**:
      ${ signature_date }

---
#####################DOWNLOAD SCREEN#####################
---
id: download VT_fee_waiver
event: VT_fee_waiver_download
question: |
  Review your forms and download and/or print them
subquestion: |
  
  ${ download_screen_instructions }

  ${ action_button_html(url_action('review_VT_fee_waiver'), label='Edit your answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

  
  ${ download_screen_bottom_instructions }
  
  ${ collapse_template(not_seeing_email) }
  ${ collapse_template(log_out_when_done) }

progress: 100
---
---
#####################OVERFLOW + ADDENDUM#####################
---
attachment:
  variable name: VT_fee_waiver_attachment.addendum
  docx template file: VT_fee_waiver_addendum.docx
---
code: |
  VT_fee_waiver_attachment.overflow_fields["public_benefits"].label = "Other public benefits that are part of the reported monthly amount"
  VT_fee_waiver_attachment.overflow_fields["public_benefits"].overflow_trigger = 1
  VT_fee_waiver_attachment.overflow_fields["public_benefits"].headers = [
    {'display_name': "Benefit"},
  ]  

  VT_fee_waiver_attachment.overflow_fields["jobs"].label = "Additional jobs"
  VT_fee_waiver_attachment.overflow_fields["jobs"].overflow_trigger = 2
  VT_fee_waiver_attachment.overflow_fields["jobs"].headers = [
    {'employer': "Employer"},    
    {'employer_name_address_phone()': "Employer address"},
  ]  
  
  VT_fee_waiver_attachment.overflow_fields["vehicles"].label = "Additional vehicles"
  VT_fee_waiver_attachment.overflow_fields["vehicles"].overflow_trigger = 4
  VT_fee_waiver_attachment.overflow_fields["vehicles"].headers = [
    {'make': "Make"},
    {'model': "Model"},
    {'year': "Year"},
    {'market_value': "Fair market value"},
    {'balance': "Amount owed"},
  ]  
  
  VT_fee_waiver_attachment.overflow_fields["real_estate"].label = "Additional real estate"
  VT_fee_waiver_attachment.overflow_fields["real_estate"].overflow_trigger = 2
  VT_fee_waiver_attachment.overflow_fields["real_estate"].headers = [
    {'source': "Description"},
    {'market_value': "Fair market value"},
    {'balance': "Amount owed"},
  ]  

  VT_fee_waiver_attachment.overflow_fields["other_assets"].label = "Additional assets"
  VT_fee_waiver_attachment.overflow_fields["other_assets"].overflow_trigger = 2
  
  VT_fee_waiver_attachment.overflow_fields["other_assets"].headers = [
    {'source': "Description"},
    {'market_value': "Fair market value"},
  ]  
  
  VT_fee_waiver_attachment.overflow_fields["other_reasons_why_cannot_afford"].overflow_trigger = 620
  VT_fee_waiver_attachment.overflow_fields["other_reasons_why_cannot_afford"].label = "Additional reasons why I cannot afford the fees"
  VT_fee_waiver_attachment.overflow_fields.gathered = True
---
#####################ATTACHMENTS#####################
---
objects:
  - VT_fee_waiver_post_interview_instructions: ALDocument.using(title="Next Steps document", filename="VT_fee_waiver_next_steps.docx", enabled=True, has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - VT_fee_waiver_attachment: ALDocument.using(title="Vermont fee waiver form 600-00228", filename="VT_fee_waiver.pdf", enabled=True, has_addendum=True, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[VT_fee_waiver_post_interview_instructions,VT_fee_waiver_attachment], filename="VT_fee_waiver.pdf_package.pdf", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[VT_fee_waiver_attachment], filename="VT_fee_waiver.pdf_package.pdf", title="All forms to download for your records", enabled=True)
---
attachments:
  - name: VT fee waiver post interview instructions
    filename: VT_fee_waiver_next_steps
    variable name: VT_fee_waiver_post_interview_instructions[i]        
    skip undefined: True
    docx template file: VT_fee_waiver_next_steps.docx
    fields:
        - "address_county": ${ trial_court.address.county }
        - "court_division": ${ trial_court.division_abbr }
        - "name": ${ trial_court }
        - "address_address": ${ trial_court.address.address }
        - "address_unit": ${ trial_court.address.unit }
        - "address_city": ${ trial_court.address.city }
        - "address_state": ${ trial_court.address.state }
        - "address_zip": ${ trial_court.address.zip }
        - "arbitrary_attribute": ${ trial_court.arbitrary_attribute }
        - "phone": ${ trial_court.phone }
        - "email": ${ trial_court.email }
  
  - name: VT fee waiver attachment
    filename: VT_fee_waiver.pdf     
    variable name: VT_fee_waiver_attachment[i]        
    skip undefined: True
    pdf template file: VT_fee_waiver.pdf
    fields:
      - "court_division": |
          % if defined("trial_court.division_abbr"):
            ${ trial_court.division_abbr.upper()  }
          % endif
      - "docket_number": ${ docket_number }
      - "trial_court_county": ${ trial_court.address.county }
      - "case_name": ${ case_name }
      - "users1_name_full": ${ users[0] }
      - "users1_name_full__1": ${ users[0] }
      - "users1_address_line_one": ${ users[0].address.line_one() }
      - "users1_address_line_two": ${ users[0].address.line_two() }
      - "users1_mailing_address_on_one_line": |
          % if users1_mailing_address_different:
          ${ users[0].mailing_address.on_one_line() }
          % endif
      - "users1_email": ${ users[0].email }
      - "users1_phone_number": ${ users[0].daytime_phone_number }
      - "household_size": ${ household_size }
      - "employed_yes": ${ employed }
      - "employed_no": ${ not employed }
      
      - "users1_employer_0_name": |
          % if jobs[0].is_self_employed:
            Self-employed
          % else:
            ${ jobs[0].employer }
          % endif
      - "users1_employer_0_address_one_line": |
          % if defined("jobs[0].employer.address"):
          ${ jobs[0].employer.address.on_one_line() }
          % endif

      - "users1_employer_1_name": |
          % if jobs[1].is_self_employed:
            Self-employed
          % else:
            ${ jobs[1].employer }
          % endif
      - "users1_employer_1_address_one_line": |
          % if defined("jobs[1].employer.address"):
          ${ jobs[1].employer.address.on_one_line() }
          % endif
      
      - "users1_receives_benefits_yes": |
          % if public_benefits.selected_types.any_true():
          ${ True }
          % endif
      - "users1_receives_benefits_no": |
          % if not public_benefits.selected_types.any_true():
          ${ True }
          % endif
   
      - "users1_benefits": |
          % if defined("public_benefits[1]"):
          ${ public_benefits[0].display_name } ...
          % else:
          ${ public_benefits[0].display_name }
          % endif
          
      - "users1_benefits_monthly_amount": |
          % if not public_benefits.selected_types.any_true():
           
          % else:
          ${ currency(public_benefits.total(times_per_year=12),symbol="") }
          % endif
      
      - "users1_income_employment_monthly_amount": |
          % if not employed:
          0.00
          % else:
          ${ currency(jobs.total(source=["full time","part time"],times_per_year=12),symbol="") }
          % endif
      
      - "users1_income_unemployment_monthly_amount": ${ currency(other_incomes.total(source=["unemployment income"],times_per_year=12),symbol="") }
      
      - "users1_income_child_support_monthly_amount": ${ currency(other_incomes.total(source=["child support income"],times_per_year=12),symbol="") }
      
      - "users1_income_other_monthly_amount": ${ currency(other_incomes.total(exclude_source=["unemployment income","child support income"],times_per_year=12),symbol="") }
      
      - "users1_income_self_employment_monthly_amount": |
          % if defined("users1_income_self_employment_monthly_amount"):
          ${ currency(users1_income_self_employment_monthly_amount,symbol="") }
          % else:
          0.00
          % endif

      - "users1_income_monthly_total": |
          % if defined("users1_income_self_employment_monthly_amount"):
          ${ currency(float(jobs.total(source=["full time","part time"],times_per_year=12) + other_incomes.total(times_per_year=12)) + users1_income_self_employment_monthly_amount,symbol="") }
          % elif employed:
          ${ currency(jobs.total(source=["full time","part time"],times_per_year=12) + other_incomes.total(times_per_year=12),symbol="") }
          % else:
          0.00      
          % endif
      - "users1_income_annual_total": |
          % if defined("users1_income_self_employment_monthly_amount"):
          ${ currency(float(jobs.total(source=["full time","part time"],times_per_year=1) + other_incomes.total(times_per_year=1)) + (users1_income_self_employment_monthly_amount * 12),symbol="") }
          % else:
          ${ currency(jobs.total(source=["full time","part time"],times_per_year=1) + other_incomes.total(times_per_year=1),symbol="") }      
          % endif
 
  
      
      - "users1_expenses_rent_mortgage_monthly_amount": ${ currency(expenses.total(source=["rent"],times_per_year=12) + expenses.total(source=["mortgage"],times_per_year=12),symbol="") }   
      - "users1_expenses_electric_monthly_amount": ${ currency(expenses.total(source=["electric"],times_per_year=12),symbol="") }    
      - "users1_expenses_phone_monthly_amount": ${ currency(expenses.total(source=["phone"],times_per_year=12),symbol="") }
      - "users1_expenses_fuel_monthly_amount": ${ currency(expenses.total(source=["fuel"],times_per_year=12)) }
      - "users1_expenses_food_monthly_amount": ${ currency(expenses.total(source=["food"],times_per_year=12)) }
      - "users1_expenses_clothes_monthly_amount": ${ currency(expenses.total(source=["clothing"],times_per_year=12)) }
      - "users1_expenses_medical_monthly_amount": ${ currency(expenses.total(source=["medical"],times_per_year=12)) }
      - "users1_expenses_child_support_monthly_amount": ${ currency(expenses.total(source=["child support"],times_per_year=12)) }
      - "users1_expenses_auto_loan_monthly_amount": ${ currency(expenses.total(source=["auto loan"],times_per_year=12)) }
      - "users1_expenses_property_tax_monthly_amount": ${ currency(expenses.total(source=["property tax"],times_per_year=12)) }
      - "users1_expenses_all_insurance_monthly_amount": ${ currency(expenses.total(source=["health insurance", "auto insurance", "other insurance"],times_per_year=12)) }
      - "users1_expenses_other_monthly_amount": ${ currency(expenses.total(exclude_source=["rent", "mortgage", "electric", "phone", "fuel", "food", "clothing", "medical", "child support", "auto loan", "property tax", "health insurance", "auto insurance", "other insurance" ],times_per_year=12)) }
      - "users1_expenses_monthly_total": ${ currency(expenses.total(times_per_year=12)) }
      
      - "assets_yes": |
          % if vehicles.selected_types.any_true():
          ${ "True" }
          % elif real_estate.selected_types.any_true():
          ${ "True" }
          % elif bank_assets.selected_types.any_true():
          ${ "True" }
          % elif other_assets.selected_types.any_true():
          ${ "True" }
          % endif
      - "assets_no": |
          % if not vehicles.selected_types.any_true():
          ${ "True" }
          % elif not real_estate.selected_types.any_true():
          ${ "True" }
          % elif not bank_assets.selected_types.any_true():
          ${ "True" }
          % elif not other_assets.selected_types.any_true():
          ${ "True" }
          % endif
      - "users1_assets_vehicle_0_amount_owed": ${ currency(vehicles[0].balance) }
      - "users1_assets_vehicle_0_description": |
           ${ vehicles[0].make } ${ vehicles[0].model } ${ vehicles[0].year } 
      - "users1_assets_vehicle_0_net_value": ${ currency(vehicles[0].market_value - vehicles[0].balance) }
      - "users1_assets_vehicle_0_market_value": ${ currency(vehicles[0].market_value) }
      - "users1_assets_vehicle_1_description": |
           ${ vehicles[1].make } ${ vehicles[1].model } ${ vehicles[1].year } 
      - "users1_assets_vehicle_1_market_value": ${ currency(vehicles[1].market_value) }
      - "users1_assets_vehicle_1_amount_owed": ${ currency(vehicles[1].balance) }
      - "users1_assets_vehicle_1_net_value": ${ currency(vehicles[1].market_value - vehicles[1].balance) }
      - "users1_assets_vehicle_2_description": |
           ${ vehicles[2].make } ${ vehicles[2].model } ${ vehicles[2].year } 
      - "users1_assets_vehicle_2_amount_owed": ${ currency(vehicles[2].balance) }
      - "users1_assets_vehicle_2_net_value": ${ currency(vehicles[2].market_value - vehicles[2].balance) }
      - "users1_assets_vehicle_2_market_value": ${ currency(vehicles[2].market_value) }
      - "users1_assets_vehicle_3_description": |
           ${ vehicles[3].make } ${ vehicles[3].model } ${ vehicles[3].year } 
      - "users1_assets_vehicle_3_market_value": ${ currency(vehicles[3].market_value) }
      - "users1_assets_vehicle_3_amount_owed": ${ currency(vehicles[3].balance) }
      - "users1_assets_vehicle_3_net_value": ${ currency(vehicles[3].market_value - vehicles[3].balance) }
      
      - "users1_assets_real_estate_0_description": |
          ${ real_estate[0].display_name }
      - "users1_assets_real_estate_0_market_value": ${ currency(real_estate[0].market_value) }
      - "users1_assets_real_estate_0_amount_owed": ${ currency(real_estate[0].balance) }
      - "users1_assets_real_estate_0_net_value": ${ currency((real_estate[0].market_value) - (real_estate[0].balance)) }

      - "users1_assets_real_estate_1_description": ${ real_estate[1].display_name }
      - "users1_assets_real_estate_1_market_value": ${ currency(real_estate[1].market_value) }
      - "users1_assets_real_estate_1_amount_owed": ${ currency(real_estate[1].balance) }
      - "users1_assets_real_estate_1_net_value": ${ currency((real_estate[1].market_value) - (real_estate[1].balance)) }
      
      - "users1_assets_checking_accounts": ${ currency(bank_assets.market_value(source=["checking account"])) }
      - "users1_assets_cash_on_hand": ${ currency(bank_assets.market_value(source=["cash on hand"])) }
      - "users1_assets_savings_accounts": ${ currency(bank_assets.market_value(source=["savings account"])) }
      - "users1_assets_cash_total": ${ currency(bank_assets.market_value()) }
      
      - "users1_assets_other_0_market_value": ${ currency(other_assets[0].market_value) }
      - "users1_assets_other_0_description": |
          % if other_assets[0].source == "other":
          ${ other_assets[0].source_other }
          % else:
          ${ other_assets[0].source }
          % endif
      - "users1_assets_other_1_market_value": ${ currency(other_assets[1].market_value) }
      - "users1_assets_other_1_description": |
          % if other_assets[1].source == "other":
          ${ other_assets[1].source_other }
          % else:
          ${ other_assets[1].source }
          % endif
      
      - "other_reasons_why_cannot_afford": ${VT_fee_waiver_attachment.safe_value("other_reasons_why_cannot_afford")}
      - "signature_date": ${ signature_date }
      - "users1_signature": ${ users[0].signature_if_final(i) }
